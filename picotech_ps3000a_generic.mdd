<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>2.42</FileVersion>
   <DriverName>picotech_ps3000a_generic.mdd</DriverName>
   <DriverType>MATLAB generic</DriverType>
   <InstrumentType>Oscilloscope</InstrumentType>
   <InstrumentManufacturer>Pico Technology Ltd.</InstrumentManufacturer>
   <InstrumentModel>PicoScope 3000 Series (A API)</InstrumentModel>
   <InstrumentVersion>1.2.24</InstrumentVersion>
   <Identify/>
   <Reset/>
   <Selftest/>
   <Error/>
   <CreateInitCode>
      <Code>function init(obj)
% This function is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

% Copyright © 2014 - 2017 Pico Technology Ltd. All rights reserved. 
% You may copy and distribute this file as long as it remains unmodified. 
% SB
    
    fprintf('\nCopyright © 2014-2017 Pico Technology Ltd. All rights reserved.\n');
    fprintf('\n');
    fprintf('PicoScope 3000 Series MATLAB Instrument Driver\n');
    fprintf('\n');

    % Only load library once 
    if (libisloaded('ps3000a'))
       
        % Do nothing
        
    else
       
        if (ispc)
            
            loadlibrary('ps3000a.dll', @ps3000aMFile);
            
        elseif (ismac)
            
                loadlibrary('libps3000a.dylib', @ps3000aMFile, 'alias', 'ps3000a');
            
        elseif (isunix)
                
                loadlibrary('libps3000a.so', @ps3000aMFile, 'alias', 'ps3000a');
            
        else
            
            % Do nothing
        
        end
        
    end

    % Only load library once 
    if (libisloaded('ps3000aWrap'))

        % Do nothing
        
    else
        
        if (ispc)
            
            loadlibrary('ps3000aWrap.dll', @ps3000aWrapMFile);
            
        elseif (ismac)
            
            loadlibrary('libps3000awrap.dylib', @ps3000aWrapMFile, 'alias', 'ps3000aWrap');
            
        elseif (isunix)   

            loadlibrary('libps3000aWrap.so', @ps3000aWrapMFile, 'alias', 'ps3000aWrap');
            
        else
            
            % Do nothing
           
        end
        
    end
    
    % Confirm data files have been loaded
    if (exist('PicoConstants.m', 'file') == 0)
    
        error('File PicoConstants.m not found - please ensure that the location of this file is added to the MATLAB Path.')
    
    end

    if (exist('PS3000aConstants.m', 'file') == 0)
    
        error('File ps3000aConstants.m not found - please ensure that the location of this file is added to the MATLAB Path.')
    
    end

    if (isstruct(evalin('base', 'ps3000aEnuminfo')) &amp;&amp; isstruct(evalin('base', 'ps3000aStructs')))
    
        % Do nothing - structures have been loaded
    
    else

        error('Failed to load enumerations and/or structures from ps3000aMFile');
    
    end
    
    % Obtain flag to indicate if functions should output text to Command
    % Window
    % -------------------------------
    
    obj.DriverData.displayOutput = obj.displayOutput;
    
    % Enumerate units - only displayed if driver is being used via command
    % line
    
    count = int16(0);
    serials = blanks(100);
    serialLth = int16(100);
    
    [status, count, serials, serialLth] = calllib('ps3000a', ...
        'ps3000aEnumerateUnits',  count, serials, serialLth);
    
    if (status == PicoStatus.PICO_OK)
        
        fprintf('Number of units found: %d\n\nSerial number(s): %s\n\n', count, serials);
        
    elseif (status == PicoStatus.PICO_NOT_FOUND)
        
        error('No units found.');
        
    else
        
        error('Status code: %d\n', status);
        
    end
    </Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This function is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

% Copyright (C) 2014 - 2017 Pico Technology Ltd. All rights reserved.
% You may copy and distribute this file as long as it remains unmodified.

    disp('Opening PicoScope 3000 Series device...');
    
    % Structure to hold status values while connecting to the device.
    % Only output when the driver is called using command line or script.
    connectStatus = [];

    % Temporary variable to store handle value
    unitHandle = 0;
    
    % PICO_OK status value (0)
    picoOK = PicoStatus.PICO_OK;

    % Obtain the serial input
    serialNum = get(obj, 'RsrcName');

    % Determine if serial number is specified or null
    if(isempty(serialNum))

        unitSerial = [];

    else

        unitSerial = serialNum;

    end

    % Open the unit
    [connectStatus.openUnit, unitHandle, obj.DriverData.unitSerial] = ...
        calllib('ps3000a', 'ps3000aOpenUnit', unitHandle, unitSerial);

    obj.DriverData.unitHandle = unitHandle;
    
    % Check Power Settings

    powerStatus = 0;
    
    % Initialise matrix channel settings
    % Setup initial channel settings (4 x 4)
    % 4 channels consisting of enabled, coupling, range, analogue offset
    % Default will be set later via resetDevice
    
    obj.DriverData.channelSettings = zeros(PicoConstants.QUAD_SCOPE, 4);
    
    % Initialise matrix for digital port settings
    % Setup initial channel settings (4 x 2)
    % 2 channels consisting of enabled state and logic level
    % Default will be set later via resetDevice
    
    obj.DriverData.digitalPortSettings = zeros(PicoConstants.QUAD_SCOPE, 2)

    % If DC power supply is not connected, or the PicoScope  to a non-USB 3.0 port, change the power source
    if(connectStatus.openUnit == PicoStatus.PICO_POWER_SUPPLY_NOT_CONNECTED ...
            || connectStatus.openUnit == PicoStatus.PICO_USB3_0_DEVICE_NON_USB3_0_PORT) 

        powerStatus = invoke(obj, 'ps3000aChangePowerSource', ...
            connectStatus.openUnit);
    
    end

    % Set handle and serial 
    % Unit connected if 0 or power supply not connected
    if(connectStatus.openUnit == picoOK || powerStatus == picoOK)
        
        % Set handle internally
        %unitHandle = obj.DriverData.unitHandle;

        % Retrieve device serial number
        infoLine = blanks(40);
        reqSize = 40;

        [connectStatus.unit_serial, unitSerial, reqSize]  = calllib('ps3000a', ...
                'ps3000aGetUnitInfo', unitHandle, infoLine, ... 
                length(infoLine), reqSize, PicoStatus.PICO_BATCH_AND_SERIAL);

        obj.DriverData.unitSerial = unitSerial;

        % Retrieve device model number
        infoLineV = blanks(40);
        reqSizeV = 40;
        
        [connectStatus.unit_variant, variant, reqSizeV]  = calllib('ps3000a', ...
                'ps3000aGetUnitInfo', unitHandle, infoLineV, ... 
                length(infoLineV), reqSizeV, PicoStatus.PICO_VARIANT_INFO);

        set(obj, 'InstrumentModel', variant);
        
        % Obtain device index from the wrapper
        
        obj.DriverData.wrapperDeviceIndex = 0;
        deviceIndex = 0;
        
        [initWrapInfoStatus, deviceIndex] = calllib('ps3000aWrap', ...
                'initWrapUnitInfo', unitHandle, deviceIndex);
            
        if(initWrapInfoStatus == PicoStatus.PICO_OK)
           
            obj.DriverData.wrapperDeviceIndex = deviceIndex;
            
        else
            
            error('Connect: Unable to initialise device with wrapper - max. number of PicoScope 3000 Series devices is 4.');
            
        end
        
        % Set whether to display output
        obj.DriverData.displayOutput = PicoConstants.TRUE;

        % Set device parameters
        invoke(obj, 'resetDevice');
        
        % Display unit information to user if not using TMTool
        fprintf('\n');
        fprintf('Connected to PicoScope 3000 Series device:-\n\n');
        fprintf('      Instrument Model: %s\n', get(obj, 'InstrumentModel'));
        fprintf('   Batch/Serial Number: %s\n', unitSerial);
        fprintf('     Analogue Channels: %d\n', get(obj, 'channelCount'));
        
        if(obj.DriverData.digitalPortCount &gt; 0)
           
            fprintf('      Digital Channels: %d\n', obj.DriverData.digitalPortCount * 8);
            
        end
            
        % Bandwidth information
        bandwidthHz = obj.DriverData.bandwidth;
        
        if(bandwidthHz &gt; 0 &amp;&amp; bandwidthHz &lt; 1e9)
            
           fprintf('             Bandwidth: %d MHz\n', (bandwidthHz/1e6));
           
        elseif(bandwith_hz &gt;= 1e9)
            
           fprintf('             Bandwidth: %d GHz\n', (bandwidthHz/1e9));
           
        else
            
            % Do nothing
            
        end
        
        fprintf('         Buffer memory: %d MS\n', obj.DriverData.bufferMemory/pow2(20));
        
        % Sampling rate information
        maxSamplingRate = obj.DriverData.maxSamplingRate;
        
        if(maxSamplingRate &gt; 0 &amp;&amp; maxSamplingRate &lt; 1e9)
            
            fprintf(' Maximum sampling rate: %d MS/s\n', maxSamplingRate/1e6);
            
        elseif(maxSamplingRate &gt;= 1e9)
           
            fprintf(' Maximum sampling rate: %d GS/s\n', maxSamplingRate/1e9);
            
        else
            
            % Do nothing
            
        end
        
        clear bandwidthHZ;
        clear maxSamplingRate;

        % Output the signal generator type
        sigGenType = 'None';
    
        switch (obj.DriverData.sigGenType)

            case PicoConstants.SIG_GEN_FUNCT_GEN

                sigGenType = 'Function Generator';

            case PicoConstants.SIG_GEN_AWG

                sigGenType = 'Arbitrary Waveform Generator';

            otherwise

                % Already set to none

        end
    
        fprintf(' Signal Generator Type: %s\n', sigGenType);

        fprintf('\n');

    elseif(connectStatus.openUnit == PicoStatus.PICO_NOT_FOUND)

        error('No unit found, please check connections.');

    else

        error('Status code: %d\n', connectStatus.openUnit);

    end</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>MCode</Type>
      <Code>function cleanup(obj)
% This function is called before the object is disconnected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

    unitHandle = obj.DriverData.unitHandle;
    
    if (isempty(unitHandle)) 
        % If no unithandle, return without doing anything
        return;
    end
    
    if(~libisloaded('ps3000a') &amp;&amp; ~libisloaded('ps3000aWrap'))
       
        % If the drivers are no longer loaded, return without doing
        % anything
        return;
        
    end

    % Disconnect Code:

    disconnectStatus = calllib('ps3000a', 'ps3000aCloseUnit', unitHandle);
    
    if(disconnectStatus == PicoStatus.PICO_OK)

        fprintf(['Connection to PicoScope %s with serial number %s ' ...
            'closed successfully.\n'], obj.InstrumentModel, obj.DriverData.unitSerial);

    else

        error(['Connection to PicoScope %s with serial number %s ' ...
            'not closed. Status code %d\n'], ...
            obj.InstrumentModel, obj.DriverData.unitSerial, disconnectStatus);

    end
    
    % Reduce the number of connected devices by 1
    status = calllib('ps3000aWrap', 'decrementDeviceCount', obj.DriverData.wrapperDeviceIndex);
    
    % Find the number of devices connected
    numberOfConnectedDevices = calllib('ps3000aWrap', 'getDeviceCount');
    
    if(numberOfConnectedDevices == 0)
        
        status = calllib('ps3000aWrap', 'resetNextDeviceIndex');
        
        unloadlibrary('ps3000aWrap');
        unloadlibrary('ps3000a');
        
        if (~libisloaded('ps3000a') &amp;&amp; ~libisloaded('ps3000aWrap'))
    
            disp('Libraries unloaded successfully.');

        else

            error('Libraries not unloaded successfully.');

        end
        
    end
    </Code>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>bandwidth</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    % If bandwidth doesn't exist, create it.
    if ( ~isfield(obj.DriverData, 'bandwidth') )
        obj.DriverData.bandwidth = 0;
    end
    
    propertyValue = obj.DriverData.bandwidth;
    </GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>bandwidth represents the maximum bandwidth (3dB cut-off point) of the oscilloscope in Hertz.</Description>
            </Property>
            <Property>
               <Name>bufferMemory</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    % If bufferMemory doesn't exist, create it.
    if ( ~isfield(obj.DriverData, 'bufferMemory') )
        obj.DriverData.bufferMemory = 0;
    else
        propertyValue = obj.DriverData.bufferMemory;
    end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Defines the size of the memory buffer on the device (in samples).</Description>
            </Property>
            <Property>
               <Name>channelCount</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    % If channelCount doesn't exist, create it.
    if ( ~isfield(obj.DriverData, 'channelCount') )
        obj.DriverData.channelCount = [ ];
    end

    propertyValue = obj.DriverData.channelCount;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The number of analogue input channels on the device.</Description>
            </Property>
            <Property>
               <Name>channelSettings</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    % If channelSettings doesn't exist, create it.
    if ( ~isfield(obj.DriverData, 'channelSettings') )
        
        obj.UserData.channelSettings = [ ];
        
    end
    
    propertyValue = int16(obj.DriverData.channelSettings);
    </GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>A matrix containing the channel settings for analogue channels.

This will consist of a 2 x 4 or 4 x 4 matrix depending on the number of analogue channels on the device.

The row number will correspond to the channel:

1 - Channel A
2 - Channel B
3 - Channel C
4 - Channel D

Each row will contain the following elements corresponding to:

enabled - set to 0 (off) or 1 (on).
dc - set AC (0)/DC (1) coupling. 
range - an enumeration representing the voltage range (PS3000A_RANGE).
analogueOffset - the offset on the channel.

</Description>
            </Property>
            <Property>
               <Name>digitalPortCount</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    % If digitalPortCount doesn't exist, create it.
    if ( ~isfield(obj.DriverData, 'digitalPortCount') )
        obj.DriverData.digitalPortCount = [ ];
    end

    propertyValue = obj.DriverData.digitalPortCount;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The number of digital ports on the device.

For non-MSO devices this will be set to 0.</Description>
            </Property>
            <Property>
               <Name>displayOutput</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    propertyValue = obj.DriverData.displayOutput;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    obj.DriverData.displayOutput = propertyValue;</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>Enumeration value to select whether to display output from function calls in the MATLAB Command Window.

Set to 1 to display output, 0 to hide output.

Note: Output will still be sent to the Command Window when calling the icdevice, connect and disconnect functions. Warning and error messages will still continue to be displayed from function calls.</Description>
            </Property>
            <Property>
               <Name>firstRange</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    % If firstRange doesn't exist, create it.
    if ( ~isfield(obj.DriverData, 'firstRange') )
        obj.DriverData.firstRange = [ ];
    else
        propertyValue = obj.DriverData.firstRange;
    end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                     <Value>3.0</Value>
                     <Value>4.0</Value>
                     <Value>5.0</Value>
                     <Value>6.0</Value>
                     <Value>7.0</Value>
                     <Value>8.0</Value>
                     <Value>9.0</Value>
                     <Value>10.0</Value>
                     <Value>11.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>2</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Enumeration corresponding to the lowest voltage range supported by the device.</Description>
            </Property>
            <Property>
               <Name>hasHardwareEts</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    % If hasHardwareEts doesn't exist, create it.
    if ( ~isfield(obj.DriverData, 'hasHardwareEts') )
        obj.DriverData.hasHardwareEts = [ ];
    end
    
    propertyValue = obj.DriverData.hasHardwareEts;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Indicates if the device has hardware-based Equivalent Time Sampling.</Description>
            </Property>
            <Property>
               <Name>lastRange</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    % If lastRange doesn't exist, create it.
    if ( ~isfield(obj.DriverData, 'lastRange') )
        obj.DriverData.lastRange = [ ];
    end
    
    propertyValue = obj.DriverData.lastRange;
    </GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                     <Value>3.0</Value>
                     <Value>4.0</Value>
                     <Value>5.0</Value>
                     <Value>6.0</Value>
                     <Value>7.0</Value>
                     <Value>8.0</Value>
                     <Value>9.0</Value>
                     <Value>10.0</Value>
                     <Value>11.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>10</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>Enumeration corresponding to highest voltage range supported by device.</Description>
            </Property>
            <Property>
               <Name>maxADCValue</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    % If maxADCValue doesn't exist, create it.
    if ( ~isfield(obj.DriverData, 'maxADCValue') )
        obj.DriverData.maxADCValue = 0;
    end
    
    propertyValue = obj.DriverData.maxADCValue;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>32512</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum ADC count value for the device.</Description>
            </Property>
            <Property>
               <Name>maxSamplingRate</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    % If maxSamplingRate doesn't exist, create it.
    if ( ~isfield(obj.DriverData, 'maxSamplingRate') )
        obj.DriverData.maxSamplingRate = [ ];
    end
    
    propertyValue = obj.DriverData.maxSamplingRate;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The maximum single shot sampling rate for the device (samples per second).</Description>
            </Property>
            <Property>
               <Name>minADCValue</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    % If minADCValue doesn't exist, create it.
    if ( ~isfield(obj.DriverData, 'minADCValue') )
        obj.DriverData.minADCValue = 0;
    end
    
    propertyValue = obj.DriverData.minADCValue;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>-32512</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The minimum ADC count value for the device.</Description>
            </Property>
            <Property>
               <Name>numPostTriggerSamples</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    % If numPostTriggerSamples doesn't exist, create it.
    if ( ~isfield(obj.DriverData, 'numPostTriggerSamples') )
        obj.DriverData.numPostTriggerSamples = [ ];
    end
    
    propertyValue = obj.DriverData.numPostTriggerSamples;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    obj.DriverData.numPostTriggerSamples = propertyValue;</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The number of samples to be taken after a trigger event.

If no trigger event has been set then this specifies the maximum number of samples to be taken. If a trigger
condition has been set, this specifies the number of samples to be taken after a trigger has fired, and the number of samples to be
collected is then: -

noOfPreTriggerSamples + noOfPostTriggerSamples

When used in Streaming mode, this is the maximum number of raw samples after a trigger event for each enabled channel.</Description>
            </Property>
            <Property>
               <Name>numPreTriggerSamples</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    % If numPreTriggerSamples doesn't exist, create it.
    if ( ~isfield(obj.DriverData, 'numPreTriggerSamples') )
        obj.DriverData.numPreTriggerSamples = [ ];
    end
    
    propertyValue = obj.DriverData.numPreTriggerSamples;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    obj.DriverData.numPreTriggerSamples = propertyValue;</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The number of samples to return before the trigger event.

If no trigger has been set then this argument is ignored and noOfPostTriggerSamples specifies the maximum number of samples to collect.

When used in Streaming mode, this is the maximum number of raw samples before the trigger event for each enabled channel.
</Description>
            </Property>
            <Property>
               <Name>timebase</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    % If timebase doesn't exist, create it.
    if ( ~isfield(obj.DriverData, 'timebase') )
        obj.DriverData.timebase = 1;
    else
        propertyValue = obj.DriverData.timebase;
    end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    obj.DriverData.timebase = propertyValue;</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>65</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The timebase used for the scope when capturing data in Block and Rapid Block mode - please refer to the Programmer's Guide for the formulae to calculate the timebase index based on the interval.

The default value set is 65 corresponding to a sampling interval as follows:

PicoScope 3000A and 3000B Series 2-channel USB 2.0 Oscilloscopes - 1008ns

PicoScope 3000 Series USB 2.0 MSOs - 504ns
PicoScope 3000A and 3000B Series 4-channel USB 2.0 Oscilloscopes - 504ns
PicoScope 3207A and 3207B USB 3.0 Osciloscopes - 504ns
PicoScope 3000D Series USB 3.0 MSOs - 504ns




 </Description>
            </Property>
            <Property>
               <Name>unitHandle</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    % If DriverData.unitHandle doesn't exist, create it.
    if ( ~isfield(obj.DriverData, 'unitHandle') )
        obj.DriverData.unitHandle = 0;
    else
        propertyValue = obj.DriverData.unitHandle;
    end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The handle assigned by the underlying driver for the device.</Description>
            </Property>
            <Property>
               <Name>unitSerial</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    % If DriverData.unitSerial doesn't exist, create it.
    if ( ~isfield(obj.DriverData, 'unitSerial') )
        obj.DriverData.unitSerial = [ ];
    else
        propertyValue = obj.DriverData.unitSerial;
    end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The device batch/serial number.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>getUnitInfo</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, unitInfoValues] = getUnitInfo(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    unitHandle = obj.DriverData.unitHandle;
    
    unitInfoDesc = {'Driver version: '; 'USB version: '; 'Hardware version: '; 'Variant: '; ...
        'Batch &amp; Serial: '; 'Cal. Date: '; 'Kernel version: '; 'Digital HW version: '; ...
        'Analogue HW version: '; 'Firmware 1: '; 'Firmware 2: '};

    infoLine = blanks(40);

    unitInfoValues = cell(11,1);

    reqSize = 40;

    status = zeros(11,1,'uint32');

    % Loop through and put together information
    for n = 1:11

        [status(n,1), infoLine1, reqSize]  = calllib('ps3000a', ...
            'ps3000aGetUnitInfo', unitHandle, infoLine, ... 
            length(infoLine), reqSize,(n-1));
        
        if(status(n,1) ~= PicoStatus.PICO_OK)
           
            switch(status(n,1))
                    
                case PicoStatus.PICO_DRIVER_FUNCTION
                    
                    error('getUnitInfo: Another driver function is being processed.');
                
                otherwise
                    
                    error('getUnitInfo: Status code %d - please refer to the PicoStatus.m file.', status); 
                
            end
            
        
        end

        unitInfoLine = strcat(unitInfoDesc(n), infoLine1);
        unitInfoValues(n) = cellstr(unitInfoLine);
        
    end</MCode>
               </Code>
               <Description>GetUnitInfo(obj) retrieves information about the specified oscilloscope for the following types of information:

1.   Driver version
2.   USB version
3.   Hardware version
4.   Variant number
5.   Batch &amp; Serial number
6.   Calibration date
7.   Kernel Version
8.   Digital Hardware version
9.   Analog Hardware version
10. Firmware 1
11. Firmware 2

Input parameters:

obj - the object representing the device.

Output parameters:

status - an array containing the status codes returned by the driver on each call to the underlying ps3000aGetUnitInfo function.
unitInfoValues - a set of text providing information on the device connected to.

For further information on the underlying ps3000aGetUnitInfo function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aChangePowerSource</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps3000aChangePowerSource(obj, powerstate)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps3000a', 'ps3000aChangePowerSource', ...
        obj.DriverData.unitHandle, powerstate);
                
    if(status ~= PicoStatus.PICO_OK)
        
        switch(status)
        
            case PicoStatus.PICO_POWER_SUPPLY_REQUEST_INVALID
                
                error('ps3000aChangePowerSource: Incorrect power mode passed for current power source.');
                
            case PicoStatus.PICO_INVALID_PARAMETER
                
                error('ps3000aChangePowerSource: A parameter value is invalid.');
                
            case PicoStatus.PICO_NOT_RESPONDING
                
                error('ps3000aChangePowerSource: The device is not responding.');
            
            otherwise
                
                error('ps3000aChangePowerSource: Status code %d - please refer to the PicoStatus.m file.', status);
                
        end
        
    end</MCode>
               </Code>
               <Description>ps3000aChangePowerSource(obj, powerstate) selects the power supply mode.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the device.
powerstate - the required state of the unit, i.e. one of:

	PicoStatus.PICO_POWER_SUPPLY_CONNECTED
	PicoStatus.PICO_POWER_SUPPLY_NOT_CONNECTED
	PicoStatus.PICO_USB3_0_DEVICE_NON_USB3_0_PORT.

Output parameters:

status - status code returned by the driver.

For further information on the ps3000aChangePowerSource function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aCurrentPowerSource</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps3000aCurrentPowerSource(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps3000a', 'ps3000aCurrentPowerSource', ...
        obj.DriverData.unitHandle);
    
    if(status ~= PicoStatus.PICO_OK)
        
        error('ps3000aCurrentPowerSource: Status code %d - please refer to the PicoStatus.m file.', status);
        
    end</MCode>
               </Code>
               <Description>ps3000aCurrentPowerSource(obj) returns the current power state of the device.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the device.

Output parameters:

status - the current power state of the device.

For further information on the ps3000aCurrentPowerSource function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aFlashLed</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps3000aFlashLed(obj, start)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps3000a', 'ps3000aFlashLed', ...
        obj.DriverData.unitHandle, start);
            
	if(status ~= PicoStatus.PICO_OK)
           
        error('ps3000aFlashLed: Status code %d - please refer to the PicoStatus.m file.', ...
            status);
        
    end</MCode>
               </Code>
               <Description>ps3000aFlashLed(obj, start) flashes the LED on the front of the scope without blocking the calling thread.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the device.
start - the action required:

	&lt; 0 : flash the LED indefinitely.
	0 : stop the LED flashing.
	&gt; 0 : flash the LED start times.

Output parameters:

status - status code returned by the device.

For further information on the ps3000aFlashLed function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aGetAnalogueOffset</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, maximumVoltage, minimumVoltage] = ps3000aGetAnalogueOffset(obj, range, coupling)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    % Values to be used for pointers
    maxVoltage = 0.0;    
    minVoltage = 0.0;

    [status, maximumVoltage, minimumVoltage] = calllib('ps3000a', ...
        'ps3000aGetAnalogueOffset', obj.DriverData.unitHandle, ...
        range, coupling, maxVoltage, minVoltage);
    
    clear maxVoltage;
    clear minVoltage;
    
    if(status ~= PicoStatus.PICO_OK)
       
        error('ps3000aGetAnalogueOffset: Status code %d - please refer to the PicoStatus.m file.', status);
    
    end</MCode>
               </Code>
               <Description>ps3000aGetAnalogueOffset(obj, range, coupling) is used to get the maximum and minimum allowable analogue offset for a specific voltage range.

This function may be used with the Test and Measurement Tool.

Input parameters: 

obj - the object representing the device.
range - an enumeration representing the voltage range to be used.
coupling - an enumeration representing the the type of AC/DC coupling used.

Output parameters:

status - status code returned by the driver.
maximumVoltage - the maximum voltage allowed for the range.
minimumVoltage - the minimum voltage allowed for the range.

For further information on the ps3000aGetAnalogueOffset function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.


</Description>
            </Method>
            <Method>
               <Name>ps3000aGetChannelInformation</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, ranges, length] = ps3000aGetChannelInformation(obj, channels)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    % Current info supported is PS3000A_CI_RANGES
    info = evalin('base', 'ps3000aEnuminfo.enps3000aChannelInfo.ps3000a_CI_RANGES');
    probe = 0;
    ranges = zeros(10, 1);
    length = 0;

    [status, ranges, length] = calllib('ps3000a', ...
        'ps3000aGetChannelInformation', obj.DriverData.unitHandle, info, ...
        0, ranges, length, channels);
    
    
    clear info;
    clear probe;
    
    if(status ~= PicoStatus.PICO_OK)
           
       error('ps3000aGetChannelInformation: Status code %d - please refer to the PicoStatus.m file.', status);
        
    end   </MCode>
               </Code>
               <Description>ps3000aGetChannelInformation(obj, channels) queries which extra voltage ranges are available on a scope device.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the device.
channels - the channel for which the range information is required (a PS3000A_CHANNEL enumeration value).

Output parameters:

status - status code returned by the driver.
ranges - an array that will be populated with available PS3000a_RANGE enumeration values.
length - the number of elements written to the ranges array.

Note that the enumerations start from 0 and should be offset by +1 to be used with the SCOPE_INPUT_RANGES array in the PicoConstants class.

For further information on the ps3000aGetChannelInformation function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aGetMaxDownSampleRatio</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, maxDownSampleRatio] = ps3000aGetMaxDownSampleRatio(obj, numUnaggregatedSamples, downSampleRatioMode, segmentIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    % Value to which the max downsample ration is assigned
    maxDownSampleRatio = 0;        

    [status, maxDownSampleRatio] = calllib('ps3000a', ...
        'ps3000aGetMaxDownSampleRatio', get(obj, 'unitHandle'), numUnaggregatedSamples, ...
            maxDownSampleRatio, downSampleRatioMode, segmentIndex);
        
    if(status ~= PicoStatus.PICO_OK)
           
       error('ps3000aGetMaxDownSampleRatio: Status code %d - please refer to the PicoStatus.m file.', status);
        
    end   </MCode>
               </Code>
               <Description>ps3000aGetMaxDownSampleRatio(obj, numUnaggregatedSamples, downSampleRatioMode, segmentIndex) returns the maximum downsampling ratio that can be used for a given number of samples in a given downsampling mode.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the device.
numUnaggregatedSamples - the number of unprocessed samples to be downsampled.
downSampleRatioMode - the downsampling mode (a PS3000A_RATIO_MODE enumeration value).
segmentIndex - the memory segment where the data is stored.

Output parameters:

status - status code returned by the driver.
maxDownSampleRatio - the maximum possible downsampling ratio.

For further information on the ps3000aGetMaxDownSampleRatio function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aGetMaxSegments</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, maxSegments] = ps3000aGetMaxSegments(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    % Passing pointer to function
    maxSegments = 0; 

    [status, maxSegments] = calllib('ps3000a', 'ps3000aGetMaxSegments', ...
                                obj.DriverData.unitHandle, maxSegments);
                            
	if(status ~= PicoStatus.PICO_OK)
           
		error('ps3000aGetMaxSegments: Status code %d - please refer to the PicoStatus.m file.', status);
        
    end</MCode>
               </Code>
               <Description>ps3000aGetMaxSegments(obj) returns the maximum number of segments allowed for the opened device.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the device.

Output parameters:

status - status code returned by the device.
maxSegments - the maximum number of segments allowed.

For further information on the ps3000aGetMaxSegments function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.
</Description>
            </Method>
            <Method>
               <Name>ps3000aGetTimebase2</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, timeIntervalNanoSeconds, maxSamples] = ps3000aGetTimebase2(obj, timebase, segmentIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    timeIntervalNanoSeconds = 0;
    oversample = 1;
    
    numSamples = obj.DriverData.numPreTriggerSamples + ...
        obj.DriverData.numPostTriggerSamples;
    
    maxSamples = 0; % Pass data to return the max samples from the driver
    
    [status, timeIntervalNanoSeconds, maxSamples] = calllib('ps3000a', ...
        'ps3000aGetTimebase2', obj.DriverData.unitHandle, timebase, numSamples, ...
        timeIntervalNanoSeconds, oversample, maxSamples, segmentIndex);
    
    if(status ~= PicoStatus.PICO_OK &amp;&amp; status ~= PicoStatus.PICO_INVALID_TIMEBASE)
           
        error('ps3000aGetTimebase2: Status code %d - please refer to the PicoStatus.m file.', status);
        
    end
    
    clear numSamples;</MCode>
               </Code>
               <Description>ps3000aGetTimebase2(obj, timebase, segmentIndex) discovers which timebases are available on the oscilloscope, returning the time interval 
as a floating point value.

The channels (and digital ports for MSO devices) should be setup using the ps3000aSetChannel function first.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the device.
timebase: a timebase index.
segmentIndex: the index of the memory segment to use.

Output parameters:

status - status code returned by the driver.
timeIntervalNanoSeconds: the time interval between readings at the selected timebase.
maxSamples: the maximum number of samples available. 

For further information on the ps3000aGetTimebase2 function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aMemorySegments</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, nMaxSamples] = ps3000aMemorySegments(obj, nSegments)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

    nMaxSamples = 0; % Initialise value for pointer

    [status, nMaxSamples] = calllib('ps3000a', 'ps3000aMemorySegments', ...
        obj.DriverData.unitHandle, nSegments, nMaxSamples);
    
    if(status ~= PicoStatus.PICO_OK)
           
        error('ps3000aMemorySegments: Status code %d - please refer to the PicoStatus.m file.', status);  
        
    end</MCode>
               </Code>
               <Description>ps3000aMemorySegments(obj, nSegments) sets the number of memory segments that the scope will use.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the device.
nSegments - the number of segments required from 1 to the number of maximum segments returned by ps3000aGetMaxSegments.

Output parameters:

status - status code returned by the driver.
nMaxSamples - the number of samples available in each segment.

For further information on the ps3000aMemorySegments function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aPingUnit</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps3000aPingUnit(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    status = calllib('ps3000a', 'ps3000aPingUnit ', obj.DriverData.unitHandle);
    </MCode>
               </Code>
               <Description>ps3000aPingUnit(obj) can be used to check that the already opened device is stil connected to the USB port and communication is successful.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the device.

Output parameters:

status - status code returned by the driver.</Description>
            </Method>
            <Method>
               <Name>ps3000aSetBandwidthFilter</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps3000aSetBandwidthFilter(obj, channel, bandwidth)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.
            
    status = calllib('ps3000a', 'ps3000aSetBandwidthFilter', ...
            obj.DriverData.unitHandle, channel, bandwidth);

    if(status ~= PicoStatus.PICO_OK)
        
        if(status == PicoStatus.PICO_INVALID_CHANNEL)

            error('ps3000aSetBandwidthFilter: Invalid channel number specified.');

        elseif(status == PicoStatus.PICO_INVALID_BANDWIDTH)

            error('ps3000aSetBandwidthFilter: Bandwidth must be 0 (Full) or 1 (20MHz).')

        else

            error('ps3000aSetBandwidthFilter: Status code %d - please refer to the PicoStatus.m file.');

        end
        
    end</MCode>
               </Code>
               <Description>ps3000aSetBandwidthFilter(obj, channel, bandwidth) specifies the bandwidth limit.

This function is valid for PicoScope 3200 D, 3400, 3200D MSO and 3400D MSO oscilloscopes. 

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the device.
channel - the channel to be configured (an enumeration from the PS3000A_CHANNEL range).
bandwidth - the bandwidth is either 0 (Full Bandwidth) or 1 (20MHz).

Output parameters:

status - status code returned by the driver.

For further information on the ps3000aSetBandwidthFilter function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aSetChannel</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps3000aSetChannel(obj, channel, enabled, type, range, analogueOffset)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

    status = calllib('ps3000a', 'ps3000aSetChannel', ...
        obj.DriverData.unitHandle, channel, enabled, type, ...
        range, analogueOffset);
    
    % Obtain channel settings information 
    chSettings = obj.DriverData.channelSettings;
    
    % Only process if status is ok.
	if(status == PicoStatus.PICO_OK)
        
        switch(channel)
            
            case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_A')
                
                chSettings(1,1) = enabled;
                chSettings(1,2) = type;
                chSettings(1,3) = range;
                chSettings(1,4) = analogueOffset; 
                
            case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_B')
                
                chSettings(2,1) = enabled;
                chSettings(2,2) = type;
                chSettings(2,3) = range;
                chSettings(2,4) = analogueOffset; 

            case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_C')
                
                chSettings(3,1) = enabled;
                chSettings(3,2) = type;
                chSettings(3,3) = range;
                chSettings(3,4) = analogueOffset;  
                
            case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_D')
                
                chSettings(4,1) = enabled;
                chSettings(4,2) = type;
                chSettings(4,3) = range;
                chSettings(4,4) = analogueOffset; 
                
            otherwise
                
                % Do nothing
                    
        end
        
        obj.DriverData.channelSettings = chSettings;
        
        % Information to be passed to the wrapper dll
        enabledChannels = zeros(PicoConstants.QUAD_SCOPE, 1, 'int16');
        
        switch(obj.DriverData.channelCount)
            
            case PicoConstants.DUAL_SCOPE
           
                % Only channels A and B
                enabledChannels = [chSettings(1,1); ...
                    chSettings(2,1); 0; 0];
            
            case PicoConstants.QUAD_SCOPE
                
                enabledChannels = [chSettings(1,1); ...
                    chSettings(2,1); ...
                    chSettings(3,1); ...
                    chSettings(4,1)];
            
            otherwise
        
                % Do nothing
            
        end
        
        setEnabledChannelsStatus = calllib('ps3000aWrap', ...
                    'setEnabledChannels', obj.DriverData.wrapperDeviceIndex, ...
                    enabledChannels);
        
    else
        
        error('ps3000aSetChannel: Status code %d - please refer to the PicoStatus.m file.', status);
        
    end</MCode>
               </Code>
               <Description>ps3000aSetChannel(obj, channel, enabled, type, range, analogueOffset) specifies whether an input channel is to be enabled, it's input coupling type, voltage range, analog offset and bandwidth limit.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the device.
channel - the channel to be configured (an enumeration from the PS3000A_CHANNEL range - PS3000A_CHANNEL_A to 	PS3000A_CHANNEL_B or PS3000A_CHANNEL_D depending on the number of analogue channels).
enabled - set to TRUE (1) to enable the channel, FALSE (0) otherwise.
type - the impedance and coupling type (an enumeration from the PS3000A_COUPLING range).
range - the input voltage range (an enumeration from the PS3000A_RANGE set of values).
analogueOffset - a voltage to add to the input channel before digitization.

Output parameters:

status - status code returned by the driver.

For further information on the ps3000aSetChannel function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aSetDataBuffer</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps3000aSetDataBuffer(obj, channel, pBuffer, bufferLth, segmentIndex, mode)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

    status = calllib('ps3000a', 'ps3000aSetDataBuffer', ...
        obj.DriverData.unitHandle, channel, pBuffer, bufferLth, ...
        segmentIndex, mode);
            
    if(status ~= PicoStatus.PICO_OK)
           
        error('ps3000aSetDataBuffer: error code %d', status);
        
    end</MCode>
               </Code>
               <Description>ps3000aSetDataBuffer(obj, channel, buffer, bufferLth, segmentIndex, mode) tells the driver where to store the data, either unprocessed or downsampled, that will be returned after the next call to one of the GetValues functions.

Input parameters:

obj - the object representing the device.
channel - the channel to which the buffer corresponds (an enumeration from the PS3000A_CHANNEL range).
pBuffer - a libpointer to a 1-D array to receive the data values for the channel.
bufferLth - the length of the buffer array.
segmentIndex - the number of the memory segment to be used.
mode - the downsampling mode (an enumeration from the PS3000A_RATIO_MODE range).

Output parameters:

status - status code returned by the device.

If capturing data in streaming mode without aggregation, the buffer must also be passed as the driverBuffer argument for the setAppAndDriverBuffers function call.

For further information on the ps3000aSetDataBuffer function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.

</Description>
            </Method>
            <Method>
               <Name>ps3000aSetDataBuffers</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps3000aSetDataBuffers(obj, channel, pBufferMax, pBufferMin, bufferLth, segmentIndex, ratioMode)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

    status = calllib('ps3000a', 'ps3000aSetDataBuffers', ...
        obj.DriverData.unitHandle, channel, pBufferMax, pBufferMin, ...
        bufferLth, segmentIndex, ratioMode);
    
    if(status ~= PicoStatus.PICO_OK)
           
        error('ps3000aSetDataBuffers: Status code %d - please refer to the PicoStatus.m file.', status); 
        
    end</MCode>
               </Code>
               <Description>ps3000aSetDataBuffers(obj, channel, pBufferMax, pBufferMin, bufferLth, segmentIndex, ratioMode) tells the driver the location of one or two buffers for receiving data.

If aggregate mode is not being used, then ps3000aSetDataBuffer can optionally be used instead.

Input parameters:

obj - the object representing the device.
channel -  the channel for which to set the buffers (an enumeration from the PS3000A_CHANNEL range).
pBufferMax - a libpointer to a 1-D array to receive the maximum data values in aggregation mode, or the non-aggregated values otherwise.
pBufferMin -  a libpointer to a 1-D array to receive the minimum aggregated data values. Not used in other downsampling modes.
bufferLth - the size of the arrays to which pBufferMax and pBufferMin are pointers.
segmentIndex - the number of the memory segment to be used.
mode - the downsampling mode to use (an enumeration from the PS3000A_RATIO_MODE range).

Output parameters:

status - status code returned by the device.

If capturing data in streaming mode with aggregation, pBufferMax and pBufferMin must also be passed as the driverMaxBuffer and driverMinBuffer arguments respectively for the setMaxMinAppAndDriverBuffers function call.

For further information on the ps3000aSetDataBuffers function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aStop</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps3000aStop(obj)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

    status = calllib('ps3000a', 'ps3000aStop', obj.DriverData.unitHandle);
    
    if(status ~= PicoStatus.PICO_OK)
           
        error('ps3000aStop: Status code %d - please refer to the PicoStatus.m file.', status);
        
    end</MCode>
               </Code>
               <Description>ps3000aStop(obj) stops the scope device from sampling data.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the device.

Output parameters:

status - status code returned by the driver.

For further information on the ps3000aStop function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>resetDevice</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function resetDevice(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    fprintf('Setting Device Parameters...\n\n');
    
    range20mV = evalin('base', 'ps3000aEnuminfo.enPS3000ARange.PS3000A_20MV');
    range50mV = evalin('base', 'ps3000aEnuminfo.enPS3000ARange.PS3000A_50MV');
    range20V = evalin('base', 'ps3000aEnuminfo.enPS3000ARange.PS3000A_20V');

    % Set device parameters
    switch(obj.InstrumentModel)

        % PS3203 devices
        case PS3000aConstants.MODEL_PS3203D

            obj.DriverData.firstRange = range20mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.FALSE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_64MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_50MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;
        
        case PS3000aConstants.MODEL_PS3203DMSO

            obj.DriverData.firstRange = range20mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.FALSE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_64MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_50MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;
        
        % PS3204 devices
        case PS3000aConstants.MODEL_PS3204A

            obj.DriverData.firstRange = range50mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_FUNCT_GEN;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_ZERO;
            obj.DriverData.hasHardwareEts = PicoConstants.FALSE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_4MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_60MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_500MSPS;

        case PS3000aConstants.MODEL_PS3204B

            obj.DriverData.firstRange = range50mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.FALSE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_8MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_60MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_500MSPS;
            
        case PS3000aConstants.MODEL_PS3204D

            obj.DriverData.firstRange = range20mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.FALSE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_128MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_70MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;

        case PS3000aConstants.MODEL_PS3204MSO

            obj.DriverData.firstRange = range50mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.FALSE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_8MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_60MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_500MSPS;

        case PS3000aConstants.MODEL_PS3204DMSO

            obj.DriverData.firstRange = range20mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.FALSE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_128MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_70MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;

        % PS3205 devices    
        case PS3000aConstants.MODEL_PS3205A

            obj.DriverData.firstRange = range50mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_FUNCT_GEN;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_ZERO;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_16MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_100MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_500MSPS;

        case PS3000aConstants.MODEL_PS3205B

            obj.DriverData.firstRange = range50mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_32MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_100MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_500MSPS;
            
        case PS3000aConstants.MODEL_PS3205D

            obj.DriverData.firstRange = range20mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_256MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_100MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;

        case PS3000aConstants.MODEL_PS3205MSO

            obj.DriverData.firstRange = range50mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_32MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_100MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_500MSPS;

        case PS3000aConstants.MODEL_PS3205DMSO

            obj.DriverData.firstRange = range20mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_256MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_100MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;

        % PS3206 devices
        case PS3000aConstants.MODEL_PS3206A

            obj.DriverData.firstRange = range50mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_FUNCT_GEN;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_ZERO;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_64MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_200MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_500MSPS;

        case PS3000aConstants.MODEL_PS3206B

            obj.DriverData.firstRange = range50mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_128MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_200MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_500MSPS;
            
        case PS3000aConstants.MODEL_PS3206D

            obj.DriverData.firstRange = range20mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_512MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_200MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS; 

        case PS3000aConstants.MODEL_PS3206MSO

            obj.DriverData.firstRange = range50mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_128MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_200MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_500MSPS;   

        case PS3000aConstants.MODEL_PS3206DMSO

            obj.DriverData.firstRange = range20mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_512MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_200MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;

        % PS3207 devices    
        case PS3000aConstants.MODEL_PS3207A

            obj.DriverData.firstRange = range50mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_FUNCT_GEN;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_ZERO;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_256MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_250MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;

        case PS3000aConstants.MODEL_PS3207B

            obj.DriverData.firstRange = range50mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_100MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_512MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_250MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;   
        
        % PS3403 devices    
        case PS3000aConstants.MODEL_PS3403D

            obj.DriverData.firstRange = range20mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.FALSE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_64MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_50MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;
            
        case PS3000aConstants.MODEL_PS3403DMSO

            obj.DriverData.firstRange = range20mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.FALSE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_64MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_50MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;
        
        % PS3404 devices    
        case PS3000aConstants.MODEL_PS3404A

            obj.DriverData.firstRange = range50mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_FUNCT_GEN;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_ZERO;
            obj.DriverData.hasHardwareEts = PicoConstants.FALSE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_4MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_60MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;

        case PS3000aConstants.MODEL_PS3404B

            obj.DriverData.firstRange = range50mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.FALSE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_8MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_60MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;
            
        case PS3000aConstants.MODEL_PS3404D

            obj.DriverData.firstRange = range20mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.FALSE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_128MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_70MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;

        case PS3000aConstants.MODEL_PS3404DMSO

            obj.DriverData.firstRange = range20mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.FALSE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_128MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_70MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;

        % PS3405 devices
        case PS3000aConstants.MODEL_PS3405A

            obj.DriverData.firstRange = range50mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_FUNCT_GEN;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_ZERO;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_16MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_100MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;

        case PS3000aConstants.MODEL_PS3405B
            
            obj.DriverData.firstRange = range50mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_32MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_100MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;

         case PS3000aConstants.MODEL_PS3405D

            obj.DriverData.firstRange = range20mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_256MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_100MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;
            
        case PS3000aConstants.MODEL_PS3405DMSO

            obj.DriverData.firstRange = range20mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_256MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_100MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;

        % PS3406 devices
        case PS3000aConstants.MODEL_PS3406A

            obj.DriverData.firstRange = range50mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_FUNCT_GEN;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_ZERO;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_64MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_200MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;

        case PS3000aConstants.MODEL_PS3406B

            obj.DriverData.firstRange = range50mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_128MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_200MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;
    
        case PS3000aConstants.MODEL_PS3406D

            obj.DriverData.firstRange = range20mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_512MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_200MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;    
            
        case PS3000aConstants.MODEL_PS3406DMSO

            obj.DriverData.firstRange = range20mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_AWG;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_20MHZ;
            obj.DriverData.hasHardwareEts = PicoConstants.TRUE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_512MS;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_200MHZ;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_1GSPS;

        otherwise

            obj.InstrumentModel = PS3000aConstants.MODEL_NONE;
            obj.DriverData.channelCount = 0;
            obj.DriverData.digitalPortCount = 0;
            obj.DriverData.firstRange = range50mV;
            obj.DriverData.lastRange = range20V;
            obj.DriverData.sigGenType = PicoConstants.SIG_GEN_NONE;
            obj.DriverData.dacFrequency = PicoConstants.AWG_DAC_FREQUENCY_ZERO;
            obj.DriverData.hasHardwareEts = PicoConstants.FALSE;
            obj.DriverData.bufferMemory = PicoConstants.BUFFER_MEMORY_ZERO;
            obj.DriverData.bandwidth = PicoConstants.BANDWIDTH_ZERO;
            obj.DriverData.maxSamplingRate = PicoConstants.MAX_SAMPLING_RATE_ZERO;

            error('Unit not supported.');

    end
    
    % Obtain channel count
    obj.DriverData.channelCount = str2num(obj.InstrumentModel(2));
    
    % Determine if device is an MSO
    isMSO = strfind(obj.InstrumentModel, 'MSO');
    
    if(isMSO &gt; 0)
        
        obj.DriverData.digitalPortCount = 2;
        
    else
        
        obj.DriverData.digitalPortCount = 0;
        
    end
    
    % Inform the wrapper dll of the number of analogue channels on the device
    status = calllib('ps3000aWrap', 'setChannelCount', obj.DriverData.wrapperDeviceIndex, ...
        obj.DriverData.channelCount);
    
    % Inform the wrapper dll of the number of digital ports on the device
    status = calllib('ps3000aWrap', 'setDigitalPortCount', obj.DriverData.wrapperDeviceIndex, ...
                    obj.DriverData.digitalPortCount);

    % Set the max. ADC value
    
    maxValue = 0;

    [maxValueStatus, obj.DriverData.maxADCValue]  = calllib('ps3000a', ...
        'ps3000aMaximumValue', obj.DriverData.unitHandle, maxValue);
    
    clear maxValue;
    clear maxValueStatus;
    
    % Set the min. ADC value 
    
    minValue = 0;

    [minValueStatus, obj.DriverData.minADCValue]  = calllib('ps3000a', ...
        'ps3000aMinimumValue', obj.DriverData.unitHandle, minValue);
    
    clear minValue;
    clear minValueStatus;
    
    % Set analogue channels defaults
    setChannelStatus = invoke(obj, 'setChannelDefaults');

    % Obtain Digital group object
    digitalGroupObj = get(obj, 'Digital');
    digitalGroupObj = digitalGroupObj(1);
    
    obj.DriverData.maxLogicLevel = PS3000aConstants.PS3000A_MAX_LOGIC_LEVEL;
    obj.DriverData.minLogicLevel = PS3000aConstants.PS3000A_MIN_LOGIC_LEVEL;
    
    % Set digital port defaults if device has digital channels
    
    if(obj.DriverData.digitalPortCount &gt; 0)
        
        setDigitalPortStatus = invoke(digitalGroupObj, 'setDigitalPortDefaults');
        
    end
    
    %%%%%%%
    
    % Turn off ETS
    
    disp('Turning off Equivalent Time Sampling...');
    
    % Obtain Block group object
    blockGroupObj = get(obj, 'Block');
    blockGroupObj = blockGroupObj(1);
    
    [etsStatus, samplingTimePs] = invoke(blockGroupObj, 'ps3000aSetEts', evalin('base', ...
                                    'ps3000aEnuminfo.enPS3000AEtsMode.PS3000A_ETS_OFF'), 0, 0);

    % Turn off trigger

    fprintf('Turning off trigger...\n\n');
    
    obj.DriverData.autoTriggerMs = 0;
    obj.DriverData.delay = 0;
    
    % Obtain Trigger group object
    
    triggerGroupObj = get(obj, 'Trigger');
    triggerGroupObj = triggerGroupObj(1);
    
    triggerStatus = invoke(triggerGroupObj, 'setTriggerOff');

    fprintf('Default Block mode parameters:-\n\n');
    
    % Set the default number of pre-trigger and post-trigger samples
    obj.DriverData.numPreTriggerSamples = 0;
    obj.DriverData.numPostTriggerSamples = 1000000;
    
    totalSamples = obj.DriverData.numPreTriggerSamples + obj.DriverData.numPostTriggerSamples;
    
    % Set the timebase - corresponds to following sampling intervals:
    %   320X A/B - 992ns
    %   320X MSO - 504ns
    %   3400 A/B, 3207A/B &amp; 3000D MSO - 496ns
    %
    obj.DriverData.timebase = 64;
    
    timeIntervalNs = 0;
    segmentIndex = 0;
    
    % Call ps3000aGetTimebase2 to return interval in ns 
    
    [timebaseStatus, timeIntervalNs, maxBlockSamples] = ...
        invoke(obj, 'ps3000aGetTimebase2', obj.DriverData.timebase, segmentIndex);

    fprintf('               Timebase index : %d\n', obj.DriverData.timebase);
    fprintf('                 Time Interval: %.1f ns\n', timeIntervalNs);
    fprintf(' Number of pre-trigger samples: %d\n', obj.DriverData.numPreTriggerSamples);
    fprintf('Number of post-trigger samples: %d\n', obj.DriverData.numPostTriggerSamples);
    fprintf('       Total number of samples: %d\n', totalSamples);
    
    fprintf('\n');
    
    fprintf('Default Streaming mode parameters:-\n\n');
   
    obj.DriverData.streamingInterval = 1e-6; % 1us -&gt; 1MS/s
    obj.DriverData.autoStop = PicoConstants.TRUE;
    
    fprintf(' Streaming interval: %1.2d s\n', obj.DriverData.streamingInterval);
    fprintf('Streaming auto stop: %d\n', obj.DriverData.autoStop);
    
    fprintf('\n');
    
    if(obj.DriverData.sigGenType == PicoConstants.SIG_GEN_FUNCT_GEN || ...
            obj.DriverData.sigGenType == PicoConstants.SIG_GEN_AWG)
       
        fprintf('Default Signal generator parameters:-\n\n');
        
        obj.DriverData.startFrequency = 1000;
        obj.DriverData.stopFrequency = 1000;
        obj.DriverData.offsetVoltage = 0;
        obj.DriverData.peakToPeakVoltage = 2000;
        
        fprintf('      Start frequency: %d Hz\n', obj.DriverData.startFrequency);
        fprintf('       Stop frequency: %d Hz\n', obj.DriverData.stopFrequency);
        fprintf('       Offset voltage: %d mV\n', obj.DriverData.offsetVoltage);
        fprintf(' Peak to Peak voltage: %d mV\n', obj.DriverData.peakToPeakVoltage);
        
    end
    
    % Set the max AWG Buffer Size if the device has an AWG
    if(obj.DriverData.sigGenType == PicoConstants.SIG_GEN_AWG)
       
        minArbitraryWaveformValue = 0;
        maxArbitraryWaveformValue = 0;
        minArbitraryWaveformSize = 0;
        maxArbitraryWaveformSize = 0;
        
        [status, minArbitraryWaveformValue, maxArbitraryWaveformValue, ...
            minArbitraryWaveformSize, maxArbitraryWaveformSize] = calllib('ps3000a', ...
            'ps3000aSigGenArbitraryMinMaxValues', obj.DriverData.unitHandle, ...
            minArbitraryWaveformValue, maxArbitraryWaveformValue, ...
            minArbitraryWaveformSize, maxArbitraryWaveformSize);
        
        obj.DriverData.awgBufferSize = maxArbitraryWaveformSize;
        
    else
        
        obj.DriverData.awgBufferSize = PicoConstants.AWG_BUFFER_ZERO;
        
    end
    
    fprintf('\n');
    disp('Initialisation complete.');</MCode>
               </Code>
               <Description>resetDevice(obj) sets the default parameters for the device.

This includes the folliowing:

1. Device specific properties.
2. Enabling all available channels to 5V range, DC coupled with 0 analogue offset.
3. Turning off the trigger (autoTriggerMs = 0 &amp; delay = 0.0).
4. Block mode parameters:

	Timebase index - 64 (992ns for 320X A/B models, 504ns for 320X MSO models  and 496ns for 3400 A/B, 3207A/B, 3000D &amp; 3000D MSO models)
	numPreTriggerSamples - 0
 	numPostTriggerSamples - 1000000

5. Streaming mode parameters:

	streamingInterval - 1e-6 (seconds)
	autoStop - 1
    
6. Signal Generator parameters:
        
	offsetVoltage - 0mV
	peakToPeakVoltage - 2000mV
	startFrequency - 1000 (Hz)
	stopFrequency - 1000 (Hz)


</Description>
            </Method>
            <Method>
               <Name>setChannelDefaults</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status] = setChannelDefaults(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    fprintf('Default Analogue Channel Setup:-\n');
    fprintf('--------------------------------\n\n');

    chA = evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_A');
    chB = evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_B');
    chC = evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_C');
    chD = evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_D');

    % Assign values used repeatedly to local variables

    true  = PicoConstants.TRUE;
    false = PicoConstants.FALSE;
    range5V = evalin('base', 'ps3000aEnuminfo.enPS3000ARange.PS3000A_5V');
    analogueOffset = 0.0;
    
    % Matrix of values to represent channels (rows) x properties (cols)
    obj.DriverData.channelSettings = zeros(obj.DriverData.channelCount, 4);

    % Set Channels A through D, updating internal settings
    % Parameters are channel index, enabled, dc coupling, range index and 
    % analogue offset.
    % If a device has only 2 analogue channels, only the settings for these
    % will be sent to the underlying driver.

    % Update internal settings
    
    % Create a num channels x fields array
    chSettings = zeros(obj.DriverData.channelCount, 4);
    
    for ch = 1:obj.DriverData.channelCount
        
        channelSettings(ch).enabled = true;
        channelSettings(ch).dc = true;
        channelSettings(ch).range = range5V;
        channelSettings(ch).offset = analogueOffset;
        
        % Transpose the resulting array for the channel and combine
        chSettings(ch, :) = cell2mat(struct2cell(channelSettings(ch)))';

    end
    
    % Assign resulting matrix to object's DriverData.channelSettings
    % property
    obj.DriverData.channelSettings = chSettings;
    
    status = zeros(obj.DriverData.channelCount, 1);
    
    status(1) = invoke(obj, 'ps3000aSetChannel', chA, true, true, range5V, analogueOffset);
    fprintf('Channel A:-\n\tEnabled: True\n\tCoupling: DC\n\tRange: 5V\n\tAnalogue Offset: 0.0V\n\n');

    status(2) = invoke(obj, 'ps3000aSetChannel', chB, true, true, range5V, analogueOffset);
    fprintf('Channel B:-\n\tEnabled: True\n\tCoupling: DC\n\tRange: 5V\n\tAnalogue Offset: 0.0V\n\n');

    if(obj.DriverData.channelCount == PicoConstants.QUAD_SCOPE)
        
        status(3) = invoke(obj, 'ps3000aSetChannel', chC, true, true, range5V, analogueOffset);
        fprintf('Channel C:-\n\tEnabled: True\n\tCoupling: DC\n\tRange: 5V\n\tAnalogue Offset: 0.0V\n\n');

        status(4) = invoke(obj, 'ps3000aSetChannel', chD, true, true, range5V, analogueOffset);
        fprintf('Channel D:-\n\tEnabled: True\n\tCoupling: DC\n\tRange: 5V\n\tAnalogue Offset: 0.0V\n\n');
    
    end
        
    % Clear local variables
    clear chA;
    clear chB;
    clear chC;
    clear chD;
    
    clear true;
    clear range5V;
        </MCode>
               </Code>
               <Description>setChannelDefaults(obj) sets the following default values for any Analogue channels found on the device:

Analogue Channel:

Enabled               : True
Coupling              : DC
Voltage Range    : 5V
Analogue Offset : 0.0V</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>block</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="block" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>maxEtsCycles</Name>
               <Location>block</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    % If maxEtsCycles doesn't exist, create it.
    if ( ~isfield(deviceObj.DriverData, 'maxEtsCycles') )
        deviceObj.DriverData.maxEtsCycles = 0;
    else
        propertyValue = deviceObj.DriverData.maxEtsCycles;
    end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>maxEtsInterleave</Name>
               <Location>block</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    % If maxEtsInterleave doesn't exist, create it.
    if ( ~isfield(deviceObj.DriverData, 'maxEtsInterleave') )
        deviceObj.DriverData.maxEtsInterleave = 0;
    else
        propertyValue = deviceObj.DriverData.maxEtsInterleave;
    end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>getBlockData</Name>
               <Location>block</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [numSamples, overflow, channelA, channelB, channelC, channelD, portD0, portD1] = getBlockData(obj, startIndex, segmentIndex, ratio, ratioMode)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    % Check ratio mode is not aggregated
    if(ratioMode ~= evalin('base', 'ps3000aEnuminfo.enPS3000ARatioMode.PS3000A_RATIO_MODE_AGGREGATE'))
    
        unitHandle = deviceObj.DriverData.unitHandle;

        channelCount = deviceObj.DriverData.channelCount;

        portCount = deviceObj.DriverData.digitalPortCount;

        % Retrieve channel settings - channel x data field matrix
        channelSettings = deviceObj.DriverData.channelSettings;

        % Retrieve port settings - port x data field matrix
        portSettings = deviceObj.DriverData.digitalPortSettings;

        % Create empty arrays for channel data.
        channelA = [];
        channelB = [];
        channelC = [];
        channelD = [];

        portD0 = [];
        portD1 = [];

        % Overflow indicator
        overflow = 0;

        % Initialise variable for array of libpointers for analogue
        % channels
        pABuffer = libpointer;

        % Initialise status
        setBufferStatus = 0;

        % total number of samples to set for data buffers
        totalSamples = deviceObj.DriverData.numPreTriggerSamples + deviceObj.DriverData.numPostTriggerSamples;

        if (deviceObj.DriverData.displayOutput == PicoConstants.TRUE)
            
            fprintf('getBlockData: Setting up data buffers...\n');
            
        end

        for ch = 1:channelCount

            % Set Data Buffer if channel is enabled - index 1 indicates if
            % channel is enabled
            if (channelSettings(ch,1) == PicoConstants.TRUE)

                % Store array of libpointers
                pABuffer(ch) = libpointer('int16Ptr', zeros(totalSamples, 1, 'int16'));

                setBufferStatus = calllib('ps3000a', 'ps3000aSetDataBuffer', ...
                    unitHandle, (ch - 1), pABuffer(ch), totalSamples, ...
                    segmentIndex, ratioMode);

                if (setBufferStatus ~= PicoStatus.PICO_OK)

                    error('getBlockData: Set Data Buffer for Channel %d status code %d', ...
                        (ch - 1), setBufferStatus);

                end

            end

        end

        % Initialise variable for array of libpointers for digital
        % ports
        pDBuffer = libpointer;

        for port = 1:portCount

            % Set Data Buffer if channel is enabled - index 1 indicates if
            % channel is enabled
            if (portSettings(port,1) == PicoConstants.TRUE)

                % Store array of libpointers
                pDBuffer(port) = libpointer('int16Ptr', zeros(totalSamples, 1, 'int16'));

                setBufferStatus = calllib('ps3000a', 'ps3000aSetDataBuffer', ...
                    unitHandle, (port + 127), pDBuffer(port), totalSamples, ... 'port 0 = 128, port 1 = 129
                    segmentIndex, ratioMode);

                if (setBufferStatus ~= PicoStatus.PICO_OK)

                    error('getBlockData: Set Data Buffer for Digital Port %d error code %d', ...
                        (port - 1), setBufferStatus);

                end

            end

        end

        if (deviceObj.DriverData.displayOutput == PicoConstants.TRUE)
            
            fprintf('getBlockData: Retrieving data...\n');
            
        end

        % Call ps3000aGetValues
        [getValuesStatus, numSamples, overflow] = ...
            calllib('ps3000a', 'ps3000aGetValues', unitHandle, startIndex, ...
            totalSamples, ratio, ratioMode, segmentIndex, overflow);

        if (getValuesStatus == PicoStatus.PICO_OK)

            if(portCount &gt; 0)

                fprintf('getBlockData: Assigning digital data to port array.\n');

            end

            for port = 1:portCount

                if(portSettings(port,1) == PicoConstants.TRUE)

                    switch(port + 127)

                        case evalin('base', 'ps3000aEnuminfo.enPS3000ADigitalPort.PS3000A_DIGITAL_PORT0')

                            portD0 = pDBuffer(port).value;

                        case evalin('base', 'ps3000aEnuminfo.enPS3000ADigitalPort.PS3000A_DIGITAL_PORT1')

                            portD1 = pDBuffer(port).value;

                        otherwise

                            % Do nothing

                    end

                end

            end

            if (deviceObj.DriverData.displayOutput == PicoConstants.TRUE)
                
                fprintf('getBlockData: Assigning analog data to array and converting to millivolts.\n');
                
            end

            % Obtain max ADC count value
            maxADCValue = double(deviceObj.DriverData.maxADCValue);

            % Retrieve data values for enabled channels
            for ch = 1:channelCount

                if(channelSettings(ch,1) == PicoConstants.TRUE)

                    % Obtain the index for the
                    % PicoConstants.SCOPE_INPUT_RANGES array corresponding
                    % to the voltage range selected for the channel.
                    scopeInputIndex = channelSettings(ch,3) + 1;

                    % Obtain the voltage range for the channel.
                    voltageRange = PicoConstants.SCOPE_INPUT_RANGES(scopeInputIndex);

                    bufferValues = adc2mv(pABuffer(ch).Value, voltageRange, ...
                        maxADCValue);

                    switch(ch - 1)

                        case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_A')

                            channelA = bufferValues;

                        case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_B')

                            channelB = bufferValues;

                        case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_C')

                            channelC = bufferValues;

                        case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_D')

                            channelD = bufferValues;

                        otherwise

                            % Do nothing

                    end

                end

            end

            if (deviceObj.DriverData.displayOutput == PicoConstants.TRUE)
                
                fprintf('getBlockData: Data succesfully retrieved.\n');
                
            end

        else

            error('getBlockData: Status code: %d. Please refer to the PicoStatus.m file.', getValuesStatus);

        end


    else

        error('getBlockData: Aggregate Mode data collection not supported by this function.');

    end
</MCode>
               </Code>
               <Description>getBlockData(obj, startIndex, segmentIndex, ratio, ratioMode) returns block mode data with or without downsampling starting at the specified sample number.

Memory for the data arrays is allocated and the driver is informed where to store the data prior to retrieval. Data collection in Aggregation mode or with more than one downsampling mode is NOT supported by this function.

This function can be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Block group.
startIndex - a zero-based index that indicates the start point for data collection. Use zero to start at the first sample.
segmentIndex - the number of the memory segment to be used/where the data is stored. Use 0 if the memory has not been segmented.
ratio - the downsampling factor that will be applied to the raw data.
ratioMode - which downsampling mode to use (specified by an enumeration from the ps3000a_RATIO_MODE range of enumerations excluding ps3000a_RATIO_MODE_AGGREGATE).


Output parameters:

numSamples - the number of samples retrieved from the driver.
overflow - a set of flags that indicate whether an overvoltage has occurred on any of the channels.
channelA - an array containing data values (in millivolts) for channel A.
channelB - an array containing data values (in millivolts) for channel B.
channelC - an array containing data values (in millivolts) for channel C.
channelD - an array containing data values (in millivolts) for channel D.
portD0 - an array containing data values in binary format for digital Port 0 (in MSB order)
portD1 - an array containing data values in binary format for digital Port 1 (in MSB order)

Channels not enabled or not supported by the device (e.g. channels C and D for a 2-channel oscilloscope) will be returned as an empty array.

Please also refer to the ps3000aSetDataBuffer and ps3000aGetValues functions in the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>getEtsBlockData</Name>
               <Location>block</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [numSamples, overflow, etsTimes, channelA, channelB, channelC, channelD, portD0, portD1] = getEtsBlockData(obj, startIndex, segmentIndex, ratio, ratioMode)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    % Check ratio mode is not aggregated
    if (ratioMode ~= evalin('base', 'ps3000aEnuminfo.enPS3000ARatioMode.PS3000A_RATIO_MODE_AGGREGATE'))
 
        unitHandle = deviceObj.DriverData.unitHandle;

        channelCount = deviceObj.DriverData.channelCount;    
        portCount = deviceObj.DriverData.digitalPortCount;

        % Retrieve channel settings - channel x data field matrix
        channelSettings = deviceObj.DriverData.channelSettings;

        % Retrieve port settings - port x data field matrix
        portSettings = deviceObj.DriverData.digitalPortSettings;

        % Create empty arrays for channel data.
        channelA = [];
        channelB = [];
        channelC = [];
        channelD = [];

        portD0 = [];
        portD1 = [];

        % Overflow indicator
        overflow = 0;

        % Initialise variable for array of libpointers for analogue
        % channels
        pABuffer = libpointer;

        % Initialise status
        setBufferStatus = 0;

        % total number of samples to set for data buffers
        totalSamples = deviceObj.DriverData.numPreTriggerSamples + deviceObj.DriverData.numPostTriggerSamples;

        if (deviceObj.DriverData.displayOutput == PicoConstants.TRUE)
            
            fprintf('getEtsBlockData: Setting up data buffers...\n');
            
        end

        for ch = 1:channelCount

            % Set Data Buffer if channel is enabled - index 1 indicates if
            % channel is enabled
            if(channelSettings(ch,1) == PicoConstants.TRUE)

                % Store array of libpointers
                pABuffer(ch) = libpointer('int16Ptr', zeros(totalSamples, 1, 'int16'));

                setBufferStatus = calllib('ps3000a', 'ps3000aSetDataBuffer', ...
                    unitHandle, (ch - 1), pABuffer(ch), totalSamples, ...
                    segmentIndex, ratioMode);

                if(setBufferStatus ~= PicoStatus.PICO_OK)

                    error('getEtsBlockData: Set Data Buffer for Channel %d status code %d', ...
                        (ch - 1), setBufferStatus);

                end

            end

        end

        % Initialise variable for array of libpointers for digital
        % channels
        pDBuffer = libpointer;

        for port = 1:portCount

            % Set data buffer if channel is enabled - index 1 indicates if
            % digital port is enabled
            if(portSettings(port, 1) == PicoConstants.TRUE)

                % Store array of libpointers
                pDBuffer(port) = libpointer('int16Ptr', zeros(totalSamples, 1, 'int16'));

                setDigiBufferStatus = calllib('ps3000a', 'ps3000aSetDataBuffer', ...
                    unitHandle, (port + 127), pDBuffer(port), totalSamples, ... 'port 0 = 128, port 1 = 129
                    segmentIndex, ratioMode);

                if(setDigiBufferStatus ~= PicoStatus.PICO_OK)

                    error('getEtsBlockData: Set Data Buffer for Digital Port %d error code %d', ...
                        (port - 1), setDigiBufferStatus);

                end

            end

        end

        % Set ETS Time buffer
        pEtsTimeBuffer = libpointer('int64Ptr', zeros(totalSamples, 1, 'int64'));

        status = calllib('ps3000a', 'ps3000aSetEtsTimeBuffer', ...
                    unitHandle, pEtsTimeBuffer, totalSamples);

        if (deviceObj.DriverData.displayOutput == PicoConstants.TRUE)
            
            fprintf('getEtsBlockData: Retrieving data...\n');
            
        end

        % Call ps3000aGetValues
        [getValuesStatus, numSamples, overflow] = ...
            calllib('ps3000a', 'ps3000aGetValues', unitHandle, startIndex, ...
            totalSamples, ratio, ratioMode, segmentIndex, overflow);

        if (getValuesStatus == PicoStatus.PICO_OK)
            
            % Retrieve ETS times
            etsTimes = pEtsTimeBuffer.Value;

            if(portCount &gt; 0)

                fprintf('getBlockData: Assigning digital data to port array.\n');

            end

            % Digital data values are returned as 16-bit counts
            for port = 1:portCount

                if(portSettings(port,1) == PicoConstants.TRUE)

                    switch(port + 127)

                        case evalin('base', 'ps3000aEnuminfo.enPS3000ADigitalPort.PS3000A_DIGITAL_PORT0')

                            portD0 = pDBuffer(port).value;

                        case evalin('base', 'ps3000aEnuminfo.enPS3000ADigitalPort.PS3000A_DIGITAL_PORT1')

                            portD1 = pDBuffer(port).value;

                        otherwise

                            % Do nothing

                    end

                end

            end

            if (deviceObj.DriverData.displayOutput == PicoConstants.TRUE)
                
                fprintf('getEtsBlockData: Assigning analog data to array and converting to millivolts.\n');
                
            end

            % Obtain max ADC count value
            maxADCValue = double(deviceObj.DriverData.maxADCValue);

            % Retrieve data values for enabled channels
            for ch = 1:channelCount

                if(channelSettings(ch,1) == PicoConstants.TRUE)

                    % Obtain the index for the
                    % PicoConstants.SCOPE_INPUT_RANGES array corresponding
                    % to the voltage range selected for the channel.
                    scopeInputIndex = channelSettings(ch,3) + 1;

                    % Obtain the voltage range for the channel.
                    voltageRange = PicoConstants.SCOPE_INPUT_RANGES(scopeInputIndex);

                    bufferValues = adc2mv(pABuffer(ch).Value, voltageRange, ...
                        maxADCValue);

                    switch(ch - 1)

                        case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_A')

                            channelA = bufferValues;

                        case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_B')

                            channelB = bufferValues;

                        case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_C')

                            channelC = bufferValues;

                        case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_D')

                            channelD = bufferValues;

                        otherwise

                            % Do nothing

                    end

                end

            end

            if (deviceObj.DriverData.displayOutput == PicoConstants.TRUE)
                
                fprintf('getEtsBlockData: Data succesfully retrieved.\n');
                
            end

        else

            error('getEtsBlockData: Status code: %d. Please refer to the PicoStatus.m file.', getValuesStatus);

        end


    else

        error('getEtsBlockData: Aggregate Mode data collection not supported by this function.');

    end
</MCode>
               </Code>
               <Description>getEtsBlockData(obj, startIndex, segmentIndex, ratio, ratioMode) returns Equivalent Time Sampling (ETS) block mode data with or without downsampling starting at the specified sample number.

Memory for the data arrays is allocated and the driver is informed where to store the data prior to retrieval. Data collection in Aggregation mode or with more than one downsampling mode is NOT supported by this function.

This function can be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Block group.
startIndex - a zero-based index that indicates the start point for data collection. Use zero to start at the first sample.
segmentIndex - the number of the memory segment to be used/where the data is stored. Use 0 if the memory has not been segmented.
ratio - the downsampling factor that will be applied to the raw data.
ratioMode - which downsampling mode to use (specified by an enumeration from the ps3000a_RATIO_MODE range of enumerations excluding ps3000a_RATIO_MODE_AGGREGATE).


Output parameters:

numSamples - the number of samples retrieved from the driver.
overflow - a set of flags that indicate whether an overvoltage has occurred on any of the channels.
etsTimes - an array containing the times (in femtoseconds) at which each sample was captured.
channelA - an array containing data values (in millivolts) for channel A.
channelB - an array containing data values (in millivolts) for channel B.
channelC - an array containing data values (in millivolts) for channel C.
channelD - an array containing data values (in millivolts) for channel D.

Channels not enabled or not supported by the device (e.g. channels C and D for a 2-channel oscilloscope) will be returned as an empty array.

Please also refer to the ps3000aSetEtsTimeBuffer, ps3000aSetDataBuffer and ps3000aGetValues functions in the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aGetTriggerTimeOffset</Name>
               <Location>block</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, timeUpper, timeLower, timeUnits] = ps3000aGetTriggerTimeOffset(obj, segmentIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    timeUpper = 0;
    timeLower = 0;
    timeUnits = 0;
    
    [status, timeUpper, timeLower, timeUnits] = calllib('ps3000a', ...
        'ps3000aGetTriggerTimeOffset', deviceObj.DriverData.unitHandle, ...
        timeUpper, timeLower, timeUnits, segmentIndex);
    
    if (status ~= PicoStatus.PICO_OK)
           
        error('ps3000aGetTriggerTimeOffset: Status code: %d. Please refer to the PicoStatus.m file.', status); 
        
    end
</MCode>
               </Code>
               <Description>ps3000aGetTriggerTimeOffset(obj, segmentIndex) gets the time, as two 4-byte values, at which the trigger occurred.

Call it after block-mode data has been captured or when data has been retrieved from a previous block-mode capture. 
A 64-bit version of this function, ps3000aGetTriggerTimeOffset64(), is also available.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Block group.
segmentIndex - the number of the memory segment for which the information is required.

Output parameters:

status - status code returned by the driver.
timeUpper - the upper 32 bits of the time at which the trigger point occurred.
timeLower - the lower 32 bits of the time at which the trigger point occurred.
timeUnits - the time units in which timeUpper and timeLower are measured (represented by a PS3000A_TIME_UNITS enumeration value).

For further information on the ps3000aGetTriggerTimeOffset function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aGetTriggerTimeOffset64</Name>
               <Location>block</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, time, timeUnits] = ps3000aGetTriggerTimeOffset64(obj, segmentIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    time = 0;
    timeUnits = 0;

    [status, timeUnits] = calllib('ps3000a', ...
        'ps3000aGetTriggerTimeOffset64', deviceObj.DriverData.unithandle, ...
        time, timeUnits, segmentIndex);
    
    if (status ~= PicoStatus.PICO_OK)
           
        error('ps3000aGetTriggerTimeOffset64: Status code: %d. Please refer to the PicoStatus.m file.', status);  
        
    end</MCode>
               </Code>
               <Description>ps3000aGetTriggerTimeOffset64(obj, segmentIndex)  gets the time, as a single 64-bit value, at which the trigger occurred.

Call it after block-mode data has been captured or when data has been retrieved from a previous block-mode capture. A 32-bit version of this function, ps3000aGetTriggerTimeOffset(), is also available.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Block group.
segmentIndex -  the number of the memory segment for which the information is required.

Output parameters:

status - status code returned by the driver.
time - the time at which the trigger point occurred.
timeUnits - the time units in which time is measured (represented by a PS3000A_TIME_UNITS enumeration value).

For further information on the ps3000aGetTriggerTimeOffset64 function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aGetValues</Name>
               <Location>block</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, numSamples, overflow] = ps3000aGetValues(obj, startIndex, noOfSamples, downSampleRatio, downSampleRatioMode, segmentIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    pNumSamples = libpointer('uint32Ptr', noOfSamples);
    pOverflow = libpointer('int16Ptr', 0);
    
    [status] = calllib('ps3000a', 'ps3000aGetValues', ...
        deviceObj.DriverData.unitHandle, startIndex, pNumSamples, downSampleRatio, ....
        downSampleRatioMode, segmentIndex, pOverflow);
    
    if (status ~= PicoStatus.PICO_OK)
           
        error('ps3000aGetValues: Status code: %d. Please refer to the PicoStatus.m file.', status);   
    
    else
        
        overflow = pOverflow.Value;
        numSamples = pNumSamples.Value;
        
    end</MCode>
               </Code>
               <Description>ps3000aGetValues(obj, startIndex, noOfSamples, downSampleRatio, downSampleRatioMode, segmentIndex) returns block-mode data, with or without downsampling, starting at the specified sample number.

Input parameters:

obj - the object representing the Block group.
startIndex - a zero-based index that indicates the start point for data collection.
noOfSamples - the number of samples required.
downSampleRatio - the downsampling factor that will be applied to the raw data.
downSampleRatioMode - which downsampling mode to use (specified by a PS3000A_RATIO_MODE enumeration value).
segmentIndex - the zero-based number of the memory segment where the data is stored.

Output parameters:

status - status code returned by the driver.
numSamples - the actual number of samples retrieved from the driver.
overflow - a set of flags that indicate whether an overvoltage has occurred on any of the channels.

For further information on the ps3000aGetValues function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aIsReady</Name>
               <Location>block</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, ready] = ps3000aIsReady(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    ready = 0; % Initialise value for pointer
    
    [status, ready] = calllib('ps3000a', 'ps3000aIsReady', ...
                            deviceObj.DriverData.unitHandle, ready);

    if (status == PicoStatus.PICO_OK || status == PicoStatus.PICO_BUSY)

        % Do nothing

    else

        error('runBlock: Error in ps3000aIsReady call - code: %d. Please refer to the PicoStatus.m file.', status); 

    end
                        
</MCode>
               </Code>
               <Description>ps3000aIsReady(obj) indicates if it has finished collecting the requested samples.

Use this function to poll the driver to indicate if block data collection has finished if using the ps300aRunBlock function.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Block group.

Output parameters:

status - status code returned by the driver.
ready - zero, the if device is still collecting. Non-zero, the device has finished collecting.

For further information on the ps3000aIsReady function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aRunBlock</Name>
               <Location>block</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, timeIndisposedMs] = ps3000aRunBlock(obj, segmentIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');

    oversample = 1;
    timeIndisposedMs = 0;   % Initialise to pass as pointer.
    lpReady = [];           % Set to NULL - Callback function not used.
    pParameter = [];        % Set to NULL - Callback function not used.
    
    unitHandle = deviceObj.DriverData.unitHandle;
    timebaseIndex = deviceObj.DriverData.timebase;
    preTriggerSamples = deviceObj.DriverData.numPreTriggerSamples;
    postTriggerSamples = deviceObj.DriverData.numPostTriggerSamples;
    
    if (deviceObj.DriverData.displayOutput == PicoConstants.TRUE)
        
        fprintf('runBlock:- Collecting block of data:\n\tTimebase: %u\n\tPre-trigger samples: %u\n\tPost-trigger samples: %u\n', ...
            timebaseIndex, preTriggerSamples, postTriggerSamples);
        
    end

    [status, timeIndisposedMs] = calllib('ps3000a', 'ps3000aRunBlock', ...
        unitHandle, preTriggerSamples, postTriggerSamples, timebaseIndex, ...
        oversample, timeIndisposedMs, segmentIndex, lpReady, pParameter);
    
    if(status ~= PicoStatus.PICO_OK)
           
        error('ps3000aRunBlock - Status code: %d. Please refer to the PicoStatus.m file.', status); 
        
    end</MCode>
               </Code>
               <Description>runBlock(obj, segmentIndex) starts collecting data in block mode.

If additional code does not need to be called prior to the device indicating that it has collected data, use the runBlock function in place of this function
and the ps3000aIsReady function.

This function can be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Block group.
segmentIndex - zero-based index, specifying which memory segment to use. Set this parameter to 0, if memory has not been segmented.

Output parameters:

status - 0 if the ps3000aRunBlock and ps3000aIsReady functions have been executed correctly. 

For further information on the ps3000aRunBlock function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aSetEts</Name>
               <Location>block</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, sampleTimePicoSeconds] = ps3000aSetEts(obj, mode, etsCycles, etsInterleave)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');

    sampleTimePicoSeconds = 0; % Initialise to pass as pointer
    
    unitHandle = deviceObj.DriverData.unitHandle;
    
    if(mode == evalin('base', 'ps3000aEnuminfo.enPS3000AEtsMode.PS3000A_ETS_OFF'))
        
        [status, sampleTimePicoSeconds] = calllib('ps3000a', 'ps3000aSetEts', ...
                unitHandle, mode, etsCycles, etsInterleave, sampleTimePicoSeconds);
    
    elseif(etsCycles &gt; 0 &amp;&amp; etsInterleave &gt; 0)
    
        maxEtsCycles = 0;
        maxEtsInterleave = 0;
        
        % Find maximum ETS cycles and ETS interleave for device
        [status, maxEtsCycles, maxEtsInterleave] = calllib('ps3000a', ...
                'ps3000aGetMaxEtsValues', unitHandle, maxEtsCycles, maxEtsInterleave);
        
        % Confirm if number of cycles or interleave is correct

        etsRatio = etsCycles / etsInterleave;

        if(etsRatio &lt; 2 || etsRatio &gt; 5)

            error('ps3000aSetEts: etsCycles must be between two and five times the value of etsInterleave');

        end

        if(etsCycles &gt; maxEtsCycles)
            
            error('ps3000aSetEts: Number of ETS cycles has exceeded the maximum (%d).', maxEtsCycles);
            
        end
        
        if(etsInterleave &gt; maxEtsInterleave) 
            
            error('ps3000aSetEts: Number of waveforms has exceeded the maximum (%d).', maxEtsInterleave);
            
        end
        
        [status, sampleTimePicoSeconds] = calllib('ps3000a', 'ps3000aSetEts', ...
                unitHandle, mode, etsCycles, etsInterleave, sampleTimePicoSeconds);
        
    else
        
        error('ps3000aSetEts: etsCycles and etsInterleave must both be greater than 0.')
        
    end</MCode>
               </Code>
               <Description>ps3000aSetEts(obj, mode, etsCycles, etsInterleave) is used to enable or disable ETS (equivalent-time sampling) and to set the ETS parameters.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Block group.
mode - must be one of the following:

	PS3000A_ETS_OFF    (0)
	PS3000A_ETS_FAST  (1)
	PS3000A_ETS_SLOW (2)

etsCycles - the number of cycles to store; must be greater than zero and between 2 and 5 times greater than etsInterleave.
etsInterleave - the number of waveforms to combine into a single ETS capture. Must be greater than zero.

Output parameters:

status - status code returned by the driver.
sampleTimePicoSeconds - the effective sampling interval of the ETS data.

For further information on the ps3000aSetEts function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.
</Description>
            </Method>
            <Method>
               <Name>ps3000aSetEtsTimeBuffer</Name>
               <Location>block</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status] = ps3000aSetEtsTimeBuffer(obj, pEtsTimeBuffer)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
    
    deviceObj = get(obj, 'Parent');

    status = calllib('ps3000a', 'ps3000aSetEtsTimeBuffer', ...
        deviceObj.DriverData.unitHandle, pEtsTimeBuffer, length(pEtsTimeBuffer.Value));
    
    if(status ~= PicoStatus.PICO_OK)
           
        error('ps3000aSetEtsTimeBuffer: Status code %d. Please refer to the PicoStatus.m file.', status);
        
    end</MCode>
               </Code>
               <Description>ps3000aSetEtsTimeBuffer(obj, pEtsTimeBuffer) tells the driver where to find your application's ETS time buffer.

If using a 32-bit version of MATLAB, use the ps3000aSetEtsTimeBuffers function instead.

The ps3000aSetEts function must be called prior to calling this function and this function in turn must be called prior to calling the ps3000aGetValues function.

Input parameters:

obj - the object representing the Block group.
pEtsTimeBuffer - a libpointer object corresponding to a 1-D array of 64-bit words, which will represent the time in femtoseconds at which the sample was captured.

Output parameters:

status - status code returned by the device.

For further information on the ps3000aSetEtsTimeBuffer function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aSetEtsTimeBuffers</Name>
               <Location>block</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status] = ps3000aSetEtsTimeBuffers(obj, pEtsTimeBufferUpper, pEtsTimeBufferLower)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');

    if(length(pEtsTimeBufferUpper.Value) == length(pEtsTimeBufferLower.Value))
    
        status = calllib('ps3000a', 'ps3000aSetEtsTimeBuffers', ...
                    deviceObj.DriverData.unitHandle, pEtsTimeBufferUpper, ...
                    pEtsTimeBufferLower, length(pEtsTimeBufferUpper.Value));
   
        if(status ~= PicoStatus.PICO_OK)
           
            error('ps3000aSetEtsTimeBuffers: Status code %d. Please refer to the PicoStatus.m file.', status); 
        
        end
        
    else
       
        error('ps3000aSetEtsTimeBuffers: Buffer lengths not equal.');
        
    end</MCode>
               </Code>
               <Description>ps3000aSetEtsTimeBuffers(obj, pBufferUpper, pBufferLower) tells the driver where to find your application's ETS time buffers. These buffers contain the timing information for each ETS sample after you run a block mode ETS capture.

For 64-bit versions of MATLAB please use the ps3000aSetEtsTimeBuffer function instead.

Input parameters:

obj - the object representing the Block group.
pBufferUpper - a libpointer object corresponding to a 1-D array of 32-bit words, which will represent the upper 32-bits of the time in femtoseconds at which the sample was captured.
pBufferLower -  a libpointer object corresponding to a 1-D array of 64-bit words, which will represent the upper 32-bits of the time in femtoseconds at which the sample was captured.

Output parameters:

status - status code returned by the device.

For further information on the ps3000aSetEtsTimeBuffers function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>runBlock</Name>
               <Location>block</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, timeIndisposedMs] = runBlock(obj, segmentIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');

    oversample = 1;
    timeIndisposedMs = 0;   % Initialise to pass as pointer.
    lpReady = [];           % Set to NULL - Callback function not used.
    pParameter = [];        % Set to NULL - Callback function not used.
    
    unitHandle = deviceObj.DriverData.unitHandle;
    timebaseIndex = deviceObj.DriverData.timebase;
    preTriggerSamples = deviceObj.DriverData.numPreTriggerSamples;
    postTriggerSamples = deviceObj.DriverData.numPostTriggerSamples;
    
    if (deviceObj.DriverData.displayOutput == PicoConstants.TRUE)
        
        fprintf('runBlock:- Collecting block of data:\n\tTimebase: %u\n\tPre-trigger samples: %u\n\tPost-trigger samples: %u\n', ...
            timebaseIndex, preTriggerSamples, postTriggerSamples);
        
    end

    [runBlockStatus, timeIndisposedMs] = calllib('ps3000a', 'ps3000aRunBlock', ...
        unitHandle, preTriggerSamples, postTriggerSamples, timebaseIndex, ...
        oversample, timeIndisposedMs, segmentIndex, lpReady, pParameter);
    
    if(runBlockStatus ~= PicoStatus.PICO_OK)
           
        error('runBlock: Error in ps3000aRunBlock call - code: %d. Please refer to the PicoStatus.m file.', runBlockStatus); 
        
    end
    
    if (deviceObj.DriverData.displayOutput == PicoConstants.TRUE)
        
        fprintf('runBlock: Waiting for device to become ready...\n');
        
    end
    
    ready = 0; % Initialise value for pointer
    
    while (ready == 0)
        
        [readyStatus, ready] = calllib('ps3000a', 'ps3000aIsReady', ...
                                unitHandle, ready);
                        
        if (readyStatus == PicoStatus.PICO_OK || readyStatus == PicoStatus.PICO_BUSY)
           
            % Do nothing
            
        else
            
            error('runBlock: Error in ps3000aIsReady call - code: %d. Please refer to the PicoStatus.m file.', readyStatus); 
        
        end
                        
    end
    
    if (deviceObj.DriverData.displayOutput == PicoConstants.TRUE)
    
        fprintf('runBlock: Device ready.\n\n');
        
    end
    
    % Other conditions would have been captured.
    if(runBlockStatus == PicoStatus.PICO_OK &amp;&amp; readyStatus == PicoStatus.PICO_OK)
        
        status = PicoStatus.PICO_OK;
        
    else
        
        if(runBlockStatus ~= PicoStatus.PICO_OK)
            
            error('runBlock:- ps3000aRunBlock error code: %d\n', runBlockStatus);
            
        else
            
            error('runBlock:- ps3000aIsReady error code: %d\n', readyStatus);
                
        end
            
        
    end;
    
    
    
</MCode>
               </Code>
               <Description>runBlock(obj, segmentIndex) starts collecting data in block mode and returns when the device is ready for data to be collected.

If additional code needs to be called prior to the device indicating that it has collected data, use the ps3000aRunBlock and ps3000aIsReady function.

This function can be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Block group.
segmentIndex - zero-based index, specifying which memory segment to use. Set this parameter to 0, if memory has not been segmented.

Output parameters:

status - status code returned by the driver.

For further information on the ps3000aRunBlock function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>digital</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Digital1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>digitalPortSettings</Name>
               <Location>digital</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');

    % If digitalPortSettings doesn't exist, create it.
    if ( ~isfield(deviceObj.DriverData, 'digitalPortSettings') )
        deviceObj.DriverData.digitalPortSettings = [ ];
    end
    
    propertyValue = deviceObj.DriverData.digitalPortSettings;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>A matrix containing the port settings for digital ports.

This will consist of a 2 x 2 matrix.

The row number will correspond to the port:

1 - Port 0
2 - Port 1

Each row will contain the following elements corresponding to:

enabled - set to 0 (off) or 1 (on).
logicLevel - set in the range -5 V to 5 V.</Description>
            </Property>
            <Property>
               <Name>maxLogicLevel</Name>
               <Location>digital</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');

    % If maxLogicLevel doesn't exist, create it.
    if ( ~isfield(deviceObj.DriverData, 'maxLogicLevel') )
        deviceObj.DriverData.maxLogicLevel = [];
    end

    propertyValue = deviceObj.DriverData.maxLogicLevel;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>32767</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The maximum count level for a digital port (corresponding to +5V).</Description>
            </Property>
            <Property>
               <Name>minLogicLevel</Name>
               <Location>digital</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');

    % If minLogicLevel doesn't exist, create it.
    if ( ~isfield(deviceObj.DriverData, 'minLogicLevel') )
        deviceObj.DriverData.minLogicLevel = [];
    end

    propertyValue = deviceObj.DriverData.minLogicLevel;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>-32767</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The minimum count level for a digital port (corresponding to -5V).</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ps3000aSetDigitalPort</Name>
               <Location>digital</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps3000aSetDigitalPort(obj, port, enabled, logicLevel)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');

    logicLevelCount = int16((logicLevel / PS3000aConstants.PS3000A_MAX_LOGIC_VOLTAGE) ...
        * deviceObj.DriverData.maxLogicLevel);
    
    status = calllib('ps3000a', 'ps3000aSetDigitalPort', ...
        deviceObj.DriverData.unitHandle, port, enabled, logicLevelCount);
    
    % Obtain digital port settings information 
    dpSettings = deviceObj.DriverData.digitalPortSettings;
    
    % Only process if status is ok.
	if(status == PicoStatus.PICO_OK)
        
        switch(port)
            
            case evalin('base', 'ps3000aEnuminfo.enPS3000ADigitalPort.PS3000A_DIGITAL_PORT0')
                
                dpSettings(1,1) = enabled;
                dpSettings(1,2) = logicLevelCount;
                
                
            case evalin('base', 'ps3000aEnuminfo.enPS3000ADigitalPort.PS3000A_DIGITAL_PORT1')
                
                dpSettings(2,1) = enabled;
                dpSettings(2,2) = logicLevelCount;
                
             otherwise
                
                % Do nothing
                    
        end
        
        deviceObj.DriverData.digitalPortSettings = dpSettings;
        
        % Information to be passed to the wrapper dll
        enabledDigitalPorts = zeros(PicoConstants.QUAD_SCOPE, 1, 'int16');
        
        enabledDigitalPorts = [dpSettings(1,1); ...
                    dpSettings(2,1); 0; 0];
        
        % Pass information to wrapper dll
        setEnabledDigitalPortsStatus = calllib('ps3000aWrap', 'setEnabledDigitalPorts', ...
            deviceObj.DriverData.wrapperDeviceIndex, enabledDigitalPorts);
                
    else
       
        error('ps3000aSetDigitalPort: error code %d\n', status);
        
    end
    
    </MCode>
               </Code>
               <Description>ps3000aSetDigitalPort(obj, port, enabled, logicLevel) is used to enable the digital port and set the logic level (the voltage at
which the state transitions from 0 to 1 for a digital channel).

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the device.
port - the port for digital data (either the enumeration PS3000A_DIGITAL_PORT0 or PS3000A_DIGITAL_PORT1).
enabled - set to TRUE (1) to enable the channel, FALSE (0) otherwise.
logicLevel - the voltage at which the state transitions between 0 and 1. Range: -5V to 5V.

Output parameters:

status - status code returned by the driver.

For further information on the ps3000aSetDigitalPort function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>setDigitalPortDefaults</Name>
               <Location>digital</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status] = setDigitalPortDefaults(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');

    fprintf('Default Digital Port Setup:-\n');
    fprintf('----------------------------\n\n');

    portD0 = evalin('base', 'ps3000aEnuminfo.enPS3000ADigitalPort.PS3000A_DIGITAL_PORT0');
    portD1 = evalin('base', 'ps3000aEnuminfo.enPS3000ADigitalPort.PS3000A_DIGITAL_PORT1');
    
    true  = PicoConstants.TRUE;
    logicLevelVoltage = 1.5; % Default value
    
    % Matrix of values to represent digital ports (rows) x properties (cols)
    deviceObj.DriverData.digitalPortSettings = zeros(deviceObj.DriverData.digitalPortCount, 2);

    % Set Digital Ports count updating internal settings
    % Parameters are enabled and logic level.

    % Update internal settings
    
    % Create a number of ports x fields array
    dpSettings = zeros(deviceObj.DriverData.digitalPortCount, 2);
    
    for ch = 1:deviceObj.DriverData.digitalPortCount
        
        digiPortSettings(ch).enabled = true;
        digiPortSettings(ch).logicLevel = logicLevelVoltage;
        
        % Transpose the resulting array for the channel and combine
        dpSettings(ch, :) = cell2mat(struct2cell(digiPortSettings(ch)))';

    end
    
    deviceObj.DriverData.digitalPortSettings = dpSettings;
    
    status = zeros(deviceObj.DriverData.digitalPortCount, 1);
    
    status(1) = invoke(obj, 'ps3000aSetDigitalPort', portD0, true, logicLevelVoltage);
    fprintf('Port D0:-\n\tEnabled: True\n\tLogic Level: +1.5V\n\n');

    status(2) = invoke(obj, 'ps3000aSetDigitalPort', portD1, true, logicLevelVoltage);
    fprintf('Port D1:-\n\tEnabled: True\n\tLogic Level: +1.5V\n\n');

    % Clear local variables
    clear portD0;
    clear portD1;
    
    clear true;
    clear logicLevel;
        
</MCode>
               </Code>
               <Description>setDigitalPortDefaults(obj) sets the following default values for any digital ports found on the device:

Digital Port:

Enabled               : True
Logic Level	      : +1.5V
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>rapidblock</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="rapidblock" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getRapidBlockData</Name>
               <Location>rapidblock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [numSamples, overflow, channelA, channelB, channelC, channelD, portD0, portD1] = getRapidBlockData(obj, numCaptures, ratio, ratioMode)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    % Check ratio mode is not aggregated
    if (ratioMode ~= evalin('base', 'ps3000aEnuminfo.enPS3000ARatioMode.PS3000A_RATIO_MODE_AGGREGATE'))

        unitHandle = deviceObj.DriverData.unitHandle;

        channelCount = deviceObj.DriverData.channelCount;

        portCount = deviceObj.DriverData.digitalPortCount;

        % Retrieve channel settings - channel x data field matrix
        channelSettings = deviceObj.DriverData.channelSettings;

        % Retrieve port settings - port x data field matrix
        portSettings = deviceObj.DriverData.digitalPortSettings;

        % Create empty arrays for channel data.
        channelA = [];
        channelB = [];
        channelC = [];
        channelD = [];

        portD0 = [];
        portD1 = [];

        % Initialise variable for array of libpointers
        pABuffer(channelCount, numCaptures) = libpointer;

        if(portCount &gt; 0)

            pDBuffer(portCount, numCaptures) = libpointer;

        end

        % Initialise array for status values
        setBufferStatus = zeros(channelCount, numCaptures, 'uint32');

        % total number of samples to set for data buffers
        totalSamples = deviceObj.DriverData.numPreTriggerSamples + deviceObj.DriverData.numPostTriggerSamples;

        % Create a 2D matrix of libpointers to allocate memory space for
        % each channel and segment combination
        for segment = 1:numCaptures

            for ch = 1:channelCount

                % Set Data Buffer if channel is enabled
                if(channelSettings(ch, 1) == PicoConstants.TRUE)

                    % Store array of libpointers
                    pABuffer(ch, segment) = libpointer('int16Ptr', zeros(totalSamples, 1, 'int16'));

                    setBufferStatus(ch, segment) = calllib('ps3000a', 'ps3000aSetDataBuffer', ...
                        unitHandle, (ch - 1), pABuffer(ch, segment), totalSamples, ...
                        (segment - 1), ratioMode);

                    if(setBufferStatus(ch, segment) ~= PicoStatus.PICO_OK)

                        error('getRapidBlockData: Set Data Buffer for Channel %d Segment % Status code %d', ...
                            (ch - 1), (segment - 1), setBufferStatus);

                    end

                end

            end

            for port = 1:portCount

                % Set Data Buffer if channel is enabled - index 1 indicates if
                % channel is enabled
                if(portSettings(port,1) == PicoConstants.TRUE)

                    % Store array of libpointers
                    pDBuffer(port, segment) = libpointer('int16Ptr', zeros(totalSamples, 1, 'int16'));

                    setBufferStatus = calllib('ps3000a', 'ps3000aSetDataBuffer', ...
                        unitHandle, (port + 127), pDBuffer(port, segment), totalSamples, ... 'port 0 = 128, port 1 = 129
                        (segment-1), ratioMode);

                    if(setBufferStatus ~= PicoStatus.PICO_OK)

                        error('getRapidBlockData: Set Data Buffer for port %d Segment % Status code %d', ...
                            (port - 1), (segment - 1), setBufferStatus);

                    end

                end

            end

        end

        if (deviceObj.DriverData.displayOutput == PicoConstants.TRUE)
        
            fprintf('getRapidBlockData: Retrieving data...\n');
            
        end

        fromSegmentIndex = 0;
        toSegmentIndex = numCaptures - 1;

        overflowSize = (toSegmentIndex - fromSegmentIndex) + 1;
        overflowPtr = libpointer('int16Ptr', zeros(overflowSize, 1, 'int16'));
        overflow = 0;

        % Call ps3000aGetValuesBulk
        [getValuesBulkStatus, numSamples] = calllib('ps3000a', ...
            'ps3000aGetValuesBulk', unitHandle, totalSamples, fromSegmentIndex, ...
            toSegmentIndex, ratio, ratioMode, overflowPtr);

        overflow = overflowPtr.Value;

        if(getValuesBulkStatus == PicoStatus.PICO_OK)

            if(portCount &gt; 0)

                fprintf('getRapidBlockData: Retrieving digital port data and assigning to port array.\n');

            end

            for port = 1: portCount

                if(portSettings(port,1) == PicoConstants.TRUE)

                    % Obtain a cell array representing the waveforms for
                    % the channel

                    bufferCells = get(pDBuffer(port, :),'Value');

                    % Combine the cell contents into a total_samples x
                    % numCaptures array               

                    if(numCaptures &gt; 1)

                        bufferCells = horzcat(bufferCells{1:end});                    

                    end


                    switch(port + 127)

                        case evalin('base', 'ps3000aEnuminfo.enPS3000ADigitalPort.PS3000A_DIGITAL_PORT0')

                            portD0 = bufferCells;

                        case evalin('base', 'ps3000aEnuminfo.enPS3000ADigitalPort.PS3000A_DIGITAL_PORT1')

                            portD1 = bufferCells;

                        otherwise

                            % Do nothing

                    end

                end

            end

            if (deviceObj.DriverData.displayOutput == PicoConstants.TRUE)
                
                fprintf('getRapidBlockData: Converting analog channels to millivolts and assigning to channel array.\n');
                
            end

            % Obtain max ADC count value
            maxADCValue = double(deviceObj.DriverData.maxADCValue);

            % Retrieve data values for enabled channels
            for ch = 1:channelCount

                if(channelSettings(ch,1) == PicoConstants.TRUE)

                    scopeInputIndex = channelSettings(ch, 3) + 1;
                    voltageRange = PicoConstants.SCOPE_INPUT_RANGES(scopeInputIndex);

                    % Obtain a cell array representing the waveforms for
                    % the channel

                    bufferCells = get(pABuffer(ch, :),'Value');

                    % Combine the cell contents into a total_samples x
                    % numCaptures array               

                    if(numCaptures &gt; 1)

                        bufferCells = horzcat(bufferCells{1:end});                    

                    end

                    bufferValues = adc2mv(bufferCells, voltageRange, ...
                        maxADCValue);

                    switch(ch - 1)

                        case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_A')

                            channelA = bufferValues;

                        case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_B')

                            channelB = bufferValues;

                        case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_C')

                            channelC = bufferValues;

                        case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_D')

                            channelD = bufferValues;

                        otherwise

                            % Do nothing

                    end               

                end

            end

            if (deviceObj.DriverData.displayOutput == PicoConstants.TRUE)
                
                fprintf('getRapidBlockData: Data succesfully retrieved.\n\n');
                
            end

            clear pABuffer;

            clear pDBuffer

            clear bufferValues;

            clear bufferCells;

        else

            error('getRapidBlockData: Error retrieving data values - code: %d', getValuesBulkStatus);

        end


    else

        error('getRapidBlockData: Aggregate Mode data collection not supported by this function.');

    end</MCode>
               </Code>
               <Description>getRapidBlockData(obj, numCaptures, ratio, ratioMode) retrieves waveforms captured using rapid block mode. The waveforms must have been collected sequentially and in the same run.

Memory for the data arrays from segment index 0 to numCaptures - 1 is allocated and the driver is informed where to store the data prior to retrieval. Data collection in Aggregation mode or with more than one downsampling mode  is NOT supported by this function.

This function can be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Rapidblock group.
numCaptures - the number of waveform captures to retrieve.
ratio - the downsampling factor that will be applied to the raw data.
ratioMode - which downsampling mode to use (specified by enumeration from the PS3000a_RATIO_MODE set excluding ps3000a_RATIO_MODE_AGGREGATE).

Output parameters:

status - status code returned by the driver.
numSamples - the number of samples retrieved from the driver.
overflow - a set of flags that indicate whether an overvoltage has occurred on any of the channels.
channelA - an array containing data values (in millivolts) for channel A.
channelB - an array containing data values (in millivolts) for channel B.
channelC - an array containing data values (in millivolts) for channel C.
channelD - an array containing data values (in millivolts) for channel D.
portD0 - an array containing data values in binary format for digital Port 0 (in MSB order)
portD1 - an array containing data values in binary format for digital Port 1 (in MSB order)

Channel data will be returned as an array in the form numSamples x numCaptures. Channels not enabled or not supported by this device will be returned as an empty array.

Please also refer to the  ps3000aSetDataBuffer and ps3000aGetValues functions as well as the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aGetNoOfCaptures</Name>
               <Location>rapidblock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, nCaptures] = ps3000aGetNoOfCaptures(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    unitHandle = deviceObj.DriverData.unitHandle;
    
    nCaptures = 0; % Value for pointer.

    [status, nCaptures] = calllib('ps3000a', 'ps3000aGetNoOfCaptures', ...
                            unitHandle, nCaptures);
                        
    if(status ~= PicoStatus.PICO_OK)
           
        error('ps3000aGetNoOfCaptures: Status code: %d. Please refer to the PicoStatus.m file.', status); 
        
    end
</MCode>
               </Code>
               <Description>ps3000aGetNoOfCaptures(obj) finds out how many captures are available in rapid block mode after runBlock has been called when either the collection completed or the collection of waveforms was interrupted by calling ps3000aStop.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Rapidblock group.

Output parameters:

status - status code returned by the driver.
nCaptures - the number of available captures that has been collected from calling runBlock or ps3000aRunBlock.

For further information on the ps3000aGetNoOfCaptures function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aGetNoOfProcessedCaptures</Name>
               <Location>rapidblock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, nProcessedCaptures] = ps3000aGetNoOfProcessedCaptures(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    unitHandle = deviceObj.DriverData.unitHandle;
    
    nProcessedCaptures = 0;

    [status, nProcessedCaptures] = calllib('ps3000a', 'ps3000aGetNoOfProcessedCaptures', ...
        unitHandle, nProcessedCaptures);
    
    if(status ~= PicoStatus.PICO_OK)
           
        error('ps3000aGetNoOfProcessedCaptures: Status code: %d. Please refer to the PicoStatus.m file.', status);  
        
    end
</MCode>
               </Code>
               <Description>ps3000aGetNoOfProcessedCaptures(obj, nCaptures) finds out how many captures in rapid block mode have been processed after runBlock has been called when either the collection completed or the collection of waveforms was interrupted by calling ps3000aStop.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Rapidblock group.

Output parameters:

status - status code returned by the driver.
nProcessedCaptures - the number of available captures that has been collected from calling runBlock or ps3000aRunBlock.

For further information on the ps3000aGetNoOfProcessedCaptures function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aGetValuesBulk</Name>
               <Location>rapidblock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, numSamples, overflow] = ps3000aGetValuesBulk(obj, noOfSamples, fromSegmentIndex, toSegmentIndex, downSampleRatio, downSampleRatioMode)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    unitHandle = deviceObj.DriverData.unitHandle;

    % overflow must be an array
    overflowSize = (toSegmentIndex - fromSegmentIndex) + 1;
    overflowPtr = libpointer('int16Ptr', zeros(overflowSize, 1));
    overflow = 0;

    [status, numSamples] = calllib('ps3000a', 'ps3000aGetValuesBulk', ...
        unitHandle, noOfSamples, fromSegmentIndex, toSegmentIndex, ... 
        downSampleRatio, downSampleRatioMode, overflowPtr);
    
    if(status == PicoStatus.PICO_OK)
        
        overflow = get(overflowPtr, 'Value');
        
    else
           
        error('ps3000aGetValuesBulk: Status code: %d. Please refer to the PicoStatus.m file.', status); 
        
    end</MCode>
               </Code>
               <Description>ps3000aGetValuesBlk(obj, noOfSamples, fromSegmentIndex, toSegmentIndex, downSampleRatio, downSampleRatioMode) retrieves waveforms captured using rapid block mode.

Input parameters:

obj - the object representing the Rapidblock group.
noOfSamples - the number of samples required.
fromSegmentIndex - the first segment from which the waveform should be retrieved.
toSegmentIndex - the last segment from which the waveform should be retrieved.
downSampleRatio - the downsampling factor that will be applied to the raw data.
downSampleRatioMode - which downsampling mode to use (specified by enumeration).

Output parameters:

status - status code returned by the driver.
numSamples - the actual number retrieved from the driver.
overflow - an array of integers equal to or larger than the number of waveforms to be retrieved with each element corresponding to an overflow value as described in the ps3000aGetValues function.

For further information on the ps3000aGetValuesBulk function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aSetNoOfCaptures</Name>
               <Location>rapidblock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps3000aSetNoOfCaptures(obj, nCaptures)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    unitHandle = deviceObj.DriverData.unitHandle;

    status = calllib('ps3000a', 'ps3000aSetNoOfCaptures', ...
        unitHandle', nCaptures);
    
    if(status ~= PicoStatus.PICO_OK)
           
        error('ps3000aSetNoOfCaptures: Status code: %d. Please refer to the PicoStatus.m file.', status);  
        
    end</MCode>
               </Code>
               <Description>ps3000aSetNoOfCaptures(obj, nCaptures) sets the number of captures to be collected in one run of rapid block mode.

If this function is not called prior to a run, only a single waveform will be captured.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Rapidblock group.
nCaptures - the number of waveforms to capture in one run.

Output parameters:

status - status code returned by the device.

For further information on the ps3000aSetNoOfCaptures function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>signalgenerator</Name>
         <Description>The Signalgenerator group contains a set of properties and functions related to the signal generator functionality of the device.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="signalgenerator" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>awgBufferSize</Name>
               <Location>signalgenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
     % If awgBufferSize doesn't exist, create it.
    if ( ~isfield(deviceObj.DriverData, 'awgBufferSize') )
        deviceObj.DriverData.awgBufferSize = 0;
    end
    
    propertyValue = deviceObj.DriverData.awgBufferSize;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="16384.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>16384</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The size of the arbitrary waveform buffer on the device, in samples.</Description>
            </Property>
            <Property>
               <Name>dacFrequency</Name>
               <Location>signalgenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
     % If dacFrequency doesn't exist, create it.
    if ( ~isfield(deviceObj.DriverData, 'dacFrequency') )
        deviceObj.DriverData.dacFrequency = 80e6;
    end
    
    propertyValue = deviceObj.DriverData.dacFrequency;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="8.0E7" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>80E6</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The update frequency of the Arbitrary Waveform Generator (MS/s or MHz).</Description>
            </Property>
            <Property>
               <Name>offsetVoltage</Name>
               <Location>signalgenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
     % If offsetVoltage doesn't exist, create it.
    if ( ~isfield(deviceObj.DriverData, 'offsetVoltage') )
        deviceObj.DriverData.offsetVoltage = 0;
    end
    
    propertyValue = deviceObj.DriverData.offsetVoltage;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    deviceObj.DriverData.offsetVoltage = propertyValue;</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="2000.0" Min="-2000.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The voltage offset, in millivolts, to be applied to the waveform.

The sum of the offset voltage and peak to peak voltage should not exceed +/- 4000mV.</Description>
            </Property>
            <Property>
               <Name>peakToPeakVoltage</Name>
               <Location>signalgenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
     % If peakToPeakVoltage doesn't exist, create it.
    if ( ~isfield(deviceObj.DriverData, 'peakToPeakVoltage') )
        deviceObj.DriverData.peakToPeakVoltage = 0;
    end
    
    propertyValue = deviceObj.DriverData.peakToPeakVoltage;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    deviceObj.DriverData.peakToPeakVoltage = propertyValue;</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="4000.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>2000</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The peak-to-peak voltage, in millivolts, of the waveform signal.

The sum of the peak to peak voltage and offset voltage should not exceed +/- 4000mV.</Description>
            </Property>
            <Property>
               <Name>sigGenType</Name>
               <Location>signalgenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
     % If sigGenType doesn't exist, create it.
    if ( ~isfield(deviceObj.DriverData, 'sigGenType') )
        deviceObj.DriverData.sigGenType = [ ];
    end
    
    propertyValue = deviceObj.DriverData.sigGenType;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>0.0</DefaultValue>
               <ReadOnly>always</ReadOnly>
               <Description>The type of Signal Generator on the device:

0 - None
1 - Function Generator
2 - Arbitrary Waveform Generator</Description>
            </Property>
            <Property>
               <Name>startFrequency</Name>
               <Location>signalgenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
     % If startFrequency doesn't exist, create it.
    if ( ~isfield(deviceObj.DriverData, 'startFrequency') )
        deviceObj.DriverData.startFrequency = [ ];
    end
    
    propertyValue = deviceObj.DriverData.startFrequency;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    deviceObj.DriverData.startFrequency = propertyValue;</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="1000000.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1000</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The frequency that the signal generator will initially produce (Hertz).</Description>
            </Property>
            <Property>
               <Name>stopFrequency</Name>
               <Location>signalgenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
     % If stopFrequency doesn't exist, create it.
    if ( ~isfield(deviceObj.DriverData, 'stopFrequency') )
        deviceObj.DriverData.stopFrequency = [ ];
    end
    
    propertyValue = deviceObj.DriverData.stopFrequency;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    deviceObj.DriverData.stopFrequency = propertyValue;</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>bounded</Constraint>
                  <ConstraintValue>
                     <Range Max="1000000.0" Min="0.0"/>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1000</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The frequency at which the sweep reverses direction or returns to the initial frequency (Hertz).

To output a signal with constant frequency, ensure that stopFrequency is equal to startFrequency.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ps3000aSigGenSoftwareControl</Name>
               <Location>signalgenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = ps3000aSigGenSoftwareControl(obj, state)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    status = calllib('ps3000a', 'ps3000aSigGenSoftwareControl', ...
                deviceObj.DriverData.unitHandle, state);
            
	if(status ~= PicoStatus.PICO_OK)
           
        error('ps3000aSigGenSoftwareControl: Status code: %d. Please refer to the PicoStatus.m file.', status);
        
    end </MCode>
               </Code>
               <Description>ps3000aSigGenSoftwareControl(obj, state) causes a trigger event, or starts and stops gating.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Signalgenerator group.
state - sets the trigger gate high or low when the trigger type is set to either SIGGEN_GATE_HIGH or SIGGEN_GATE_LOW.

Output parameters:

status - status code returned by the driver.

For further information on the ps3000aSigGenSoftwareControl function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>setSigGenArbitrary</Name>
               <Location>signalgenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, dwellTime] = setSigGenArbitrary(obj, increment, dwellTime, arbitraryWaveform, sweepType, operation, indexMode, shots, sweeps, triggerType, triggerSource, extInThresholdMV)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');

    % Only call function if device has an Arbitrary Waveform Generator
    if(get(obj, 'sigGenType') == PicoConstants.SIG_GEN_AWG)

        offsetVoltageUV = deviceObj.DriverData.offsetVoltage * 1e3;
        peakToPeakVoltageUV = deviceObj.DriverData.peakToPeakVoltage * 1e3;
        
        if(abs(offsetVoltageUV + peakToPeakVoltageUV) &gt; 4000000)
            
            error('setSigGenBuiltInSimple: The sum of offsetVoltage and peakToPeakVoltage cannot exceed +/-4000mV.');
            
        end
        
        maxBufferSize = get(obj, 'awgBufferSize');
        dacFrequency = get(obj, 'dacFrequency');
        
        % Convert the waveform to the range for the driver
        arbitraryWave = int16(arbitraryWaveform * double(intmax('int16')));
        
        startFrequency = get(obj, 'startFrequency');

        startDeltaPhase = freq2delta(startFrequency, length(arbitraryWave), ...
            maxBufferSize, dacFrequency);

        stopDeltaPhase = 0;

        dwellCount = 0;

        % No need to calculate stop delta phase if start and stop frequencies
        % are the same.
        
        stopFrequency = get(obj, 'stopFrequency');
        
        if(stopFrequency == startFrequency)

            stopDeltaPhase = startDeltaPhase;

        else

            stopDeltaPhase = freq2delta(stopFrequency, length(arbitraryWave), ...
                maxBufferSize, dacFrequency);

        end

        %fprintf('setSigGenArbitrary:Stop delta phase: %d\n', stop_delta_phase);
        
        deltaPhaseIncrement = freq2delta(increment, length(arbitraryWave), ...
                maxBufferSize, dacFrequency);
            
        %fprintf('setSigGenArbitrary:Delta phase increment: %d\n', delta_phase_increment);

        dwellCount = round(dwellTime * dacFrequency); % Round to the nearest integer
        
        %fprintf('setSigGenArbitrary:Dwell count: %d\n', dwell_count);

        if(dwellCount &lt; PS3000aConstants.MIN_DWELL_COUNT)

            dwellCount = PS3000aConstants.MIN_DWELL_COUNT;

        end
        
        % Return dwell time information to the user if it has been
        % modified.
        dwellTime = dwellCount / dacFrequency;
        
        %fprintf('setSigGenArbitrary:Dwell time: %d\n', dwell_time);
        
        % No external trigger for PicoScope 4824
        extInThreshold = 0;

        status = calllib('ps3000a', 'ps3000aSetSigGenArbitrary', ...
                    deviceObj.DriverData.unitHandle, ...
                    offsetVoltageUV, peakToPeakVoltageUV, startDeltaPhase, ...
                    stopDeltaPhase, deltaPhaseIncrement, dwellCount, arbitraryWave, ...
                    length(arbitraryWave), sweepType, operation, indexMode, shots, ...
                    sweeps, triggerType, triggerSource, extInThreshold);
         
        % Output error message to user if status is not PICO_OK        
        if(status ~= PicoStatus.PICO_OK)
                    
            switch(status)

                case PicoStatus.PICO_SIG_GEN_PARAM
                    
                    error('setSigGenArbitrary: Incorrect parameter passed to the signal generator.');
                    
                case PicoStatus.PICO_SHOTS_SWEEPS_WARNING
                    
                    error('setSigGenArbitrary: Incorrect parameter passed to the signal generator.');
                    
                case PicoStatus.PICO_SIGGEN_OUTPUT_OVER_VOLTAGE
                    
                    error('setSigGenArbitrary: The combined peak to peak voltage and the analog offset voltage must be in the range 0 -&gt; +/- 2V');
                   
                case PicoStatus.PICO_WARNING_EXT_THRESHOLD_CONFLICT
                    
                    error('setSigGenArbitrary: Attempt to set different EXT input thresholds set for signal generator and oscilloscope trigger.');
                    
                case PicoStatus.PICO_SIGGEN_OFFSET_VOLTAGE
                    
                    error('setSigGenArbitrary: The analog offset voltage is out of range.');

                case PicoStatus.PICO_SIGGEN_PK_TO_PK
                    
                    error('setSigGenArbitrary: The analog peak to peak voltage must be in the range 0 -&gt; +/- 2V.');
                    
                case PicoStatus.PICO_SIGGEN_WAVEFORM_SETUP_FAILED
                    
                    error('setSigGenArbitrary: Unable to setup signal generator waveform.');
                    
                otherwise     
                    
                    error('setSigGenArbitrary: Status code: %d. Please refer to the PicoStatus.m file.', status);
            end
            
        end
        
        clear offsetVoltageUV
        clear peakToPeakVoltageUV
        clear maxBufferSize
        clear dacFrequency
        clear arbitraryWave
        clear startDeltaPhase
        clear stopDeltaPhase
        clear dwellCount
        clear deltaPhaseIncrement
        clear startFrequency;
        clear stopFrequency;
                
    else
       
        error('AWG functionality not supported by this device.');
        
    end</MCode>
               </Code>
               <Description>setSigGenArbitrary(obj, increment, dwellTime, arbitraryWaveform, sweepType, operation, indexMode, shots, sweeps, triggerType, triggerSource, extInThreshold) programs the signal generator to produce an arbitrary waveform.

The startFrequency, stopFrequency, offsetVoltage and peakToPeakVoltage properties must be set prior to calling this function, otherwise the default values will be used.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Signalgenerator group.
increment - the increase or decrease in frequency when operating in sweep mode.
dwellTime - the time for which the sweep stays at each frequency, in seconds.
arbitraryWaveform -  a buffer that holds the waveform pattern as a set of samples in the range -1 to +1. These values correspond to the 	                                   maximum and minimum amplitude values of the waveform.
sweepType -  determines whether the startFrequency is swept up to the stopFrequency, or down to it, or repeatedly up and down.
operation - configures the white noise/PRBS (pseudo-random binary sequence) generator.
indexMode - specifies how the signal will be formed from the arbitrary waveform data.
shots - the number of cycles of the waveform to be produced after a trigger event. If this is set to a non-zero value 
	then sweeps must be set to zero.
sweeps - the number of times to sweep the frequency after a trigger event, according to sweepType. If this is set to a non-zero value 
		then shots must be set to zero.
triggerType - the type of trigger that will be applied to the signal generator.
triggerSource - the source that will trigger the signal generator.
extInThresholdMV - used to set the trigger level (in millivolts) for the external trigger. This should be in the range -5000 to 5000mV.

Output parameters:

status - status code returned by the driver.
dwellTime -  the dwell time will be modified if the user specifies a dwell time corresponding to less than the minimum dwell count for the device (10).

For further information on the ps3000aSetSigGenArbitrary function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs.




 </Description>
            </Method>
            <Method>
               <Name>setSigGenArbitrarySimple</Name>
               <Location>signalgenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = setSigGenArbitrarySimple(obj, arbitraryWaveform)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');

    % Only call function if device has an Arbitrary Waveform Generator
    if(get(obj, 'sigGenType') == PicoConstants.SIG_GEN_AWG)

        % Convert voltages to microvolts
        offsetVoltageUV = deviceObj.DriverData.offsetVoltage * 1e3;
        peakToPeakVoltageUV = deviceObj.DriverData.peakToPeakVoltage * 1e3;
        
        if(abs(offsetVoltageUV + peakToPeakVoltageUV) &gt; 4000000)
            
            error('setSigGenBuiltInSimple: The sum of offsetVoltage and peakToPeakVoltage cannot exceed +/-4000mV.');
            
        end
        
        maxBufferSize = get(obj, 'awgBufferSize');
        dacFrequency = get(obj, 'dacFrequency');
        
        % Convert the waveform to the range for the driver
        arbitraryWave = int16(arbitraryWaveform * double(intmax('int16')));

        startDeltaPhase = freq2delta(get(obj, 'startFrequency'), ...
            length(arbitraryWave), maxBufferSize, dacFrequency);

        % Constant frequency
        stopDeltaPhase = startDeltaPhase;
        
        status = calllib('ps3000a', 'ps3000aSetSigGenArbitrary', ...
                    deviceObj.DriverData.unitHandle, offsetVoltageUV, ...
                    peakToPeakVoltageUV, startDeltaPhase, ...
                    stopDeltaPhase, 0, 0, arbitraryWave, ...
                    length(arbitraryWave), 0, 0, 0, 0, 0, 0, 0, 0);
         
        % Output error message to user if status is not PICO_OK        
        if(status ~= PicoStatus.PICO_OK)
                    
            switch(status)

                case PicoStatus.PICO_SIG_GEN_PARAM
                    
                    error('setSigGenArbitrary: Incorrect parameter passed to the signal generator.');
                    
                case PicoStatus.PICO_SHOTS_SWEEPS_WARNING
                    
                    error('setSigGenArbitrary: Incorrect parameter passed to the signal generator.');
                    
                case PicoStatus.PICO_SIGGEN_OUTPUT_OVER_VOLTAGE
                    
                    error('setSigGenArbitrary: The combined peak to peak voltage and the analog offset voltage must be in the range 0 -&gt; +/- 2V');
                   
                case PicoStatus.PICO_WARNING_EXT_THRESHOLD_CONFLICT
                    
                    error('setSigGenArbitrary: Attempt to set different EXT input thresholds set for signal generator and oscilloscope trigger.');
                    
                case PicoStatus.PICO_SIGGEN_OFFSET_VOLTAGE
                    
                    error('setSigGenArbitrary: The analog offset voltage is out of range.');

                case PicoStatus.PICO_SIGGEN_PK_TO_PK
                    
                    error('setSigGenArbitrary: The analog peak to peak voltage must be in the range 0 -&gt; +/- 2V.');
                    
                case PicoStatus.PICO_SIGGEN_WAVEFORM_SETUP_FAILED
                    
                    error('setSigGenArbitrary: Unable to setup signal generator waveform.');
                    
                otherwise     
                    
                    error('setSigGenArbitrarySimple: Status code: %d. Please refer to the PicoStatus.m file.', status);
            end
            
        end
                
    else
       
        error('AWG functionality not supported by this device.');
        
    end


</MCode>
               </Code>
               <Description>setSigGenArbitrary(obj, arbitraryWaveform) programs the signal generator to produce an arbitrary waveform at a constant frequency.

The startFrequency, stopFrequency, offsetVoltage and peakToPeakVoltage properties must be set prior to calling this function, otherwise the default values will be used.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Signalgenerator group.
arbitraryWaveform -  a buffer that holds the waveform pattern as a set of samples in the range -1 to +1. These values correspond to the 	maximum and minimum amplitude values of the waveform.

Output parameters:

status - status code returned by the driver.

For further information on the ps3000aSetSigGenArbitrary function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>setSigGenBuiltIn</Name>
               <Location>signalgenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = setSigGenBuiltIn(obj, waveType, increment, dwellTime, sweepType, operation, shots, sweeps, triggerType, triggerSource, extInThresholdMV)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
    
    deviceObj = get(obj, 'Parent');
    sigGenType = get(obj, 'sigGenType');
    
    % Error checking
    if(sigGenType == PicoConstants.SIG_GEN_AWG || ...
            sigGenType == PicoConstants.SIG_GEN_FUNCT_GEN)
        
        % Convert millivolt values to microvolts  
        offsetVoltageUV = deviceObj.DriverData.offsetVoltage * 1e3;
        peakToPeakVoltageUV = deviceObj.DriverData.peakToPeakVoltage * 1e3;
        
        if(abs(offsetVoltageUV + peakToPeakVoltageUV) &gt; 4000000)
            
            error('setSigGenBuiltInSimple: The sum of offsetVoltage and peakToPeakVoltage cannot exceed +/-4000mV.');
            
        end
        
        % Convert extInThresholdMV to counts
        
        extInThreshold = round(((extInThresholdMV / 1000) / PS3000aConstants.PS3000A_EXT_MAX_VOLTAGE) ...
            * PS3000aConstants.PS3000A_EXT_MAX_VALUE);

        status = calllib('ps3000a', 'ps3000aSetSigGenBuiltIn', deviceObj.DriverData.unitHandle, ...
                    offsetVoltageUV, peakToPeakVoltageUV, waveType, ...
                    deviceObj.DriverData.startFrequency, deviceObj.DriverData.stopFrequency, ...
                    increment, dwellTime, sweepType, operation, shots, sweeps, ...
                    triggerType, triggerSource, extInThreshold);

        % Output error message to user if status is not PICO_OK        
        if(status ~= PicoStatus.PICO_OK)

            switch(status)

                case PicoStatus.PICO_SIG_GEN_PARAM

                    error('setSigGenBuiltIn: One or more signal generator parameters are out of range.');

                case PicoStatus.PICO_SHOTS_SWEEPS_WARNING

                    error('setSigGenBuiltIn: Shots/sweeps warning.');

                case PicoStatus.PICO_SIGGEN_OUTPUT_OVER_VOLTAGE

                    error('setSigGenBuiltIn: The combined peak to peak voltage and the analog offset voltage must be in the range 0 -&gt; +/- 2V');

                case PicoStatus.PICO_SIGGEN_OFFSET_VOLTAGE

                    error('setSigGenBuiltIn: The analog offset voltage is out of range.');

                case PicoStatus.PICO_SIGGEN_PK_TO_PK

                    error('setSigGenBuiltIn: The analog peak to peak voltage must be in the range 0 -&gt; +/- 2V.');

                case PicoStatus.PICO_SIGGEN_WAVEFORM_SETUP_FAILED

                    error('setSigGenBuiltIn: Unable to setup signal generator waveform.');

                otherwise     

                    error('setSigGenBuiltIn: Status code: %d. Please refer to the PicoStatus.m file.', status);
            end

        end
        
        clear offsetVoltage;
        clear peakToPeakVoltage;
        clear sigGenType;
            
    else
        
        error('setSigGenBuiltIn: Signal Generator functionality not supported by this device.');
        
    end</MCode>
               </Code>
               <Description>setSigGenBuiltIn(obj, waveType, increment, dwellTime, sweepType, operation, shots, sweeps, triggerType, triggerSource, extInThresholdMV) sets up the signal generator to produce a signal from a list of built-in waveforms.

The startFrequency, stopFrequency, offsetVoltage and peakToPeakVoltage properties must be set prior to calling this function otherwise the default values will be used.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Signalgenerator group.
wavetype - the type of waveform to be generated by the oscilloscope. Use the following waveType enumerations:

		0 - SINE
		1 - SQUARE
		2 - TRIANGLE
		3 - RAMP UP
		4 - RAMP DOWN
		5 - SINC
		6 - GAUSSIAN
		7 - HALF SINE
		8 - DC VOLTAGE
		9 - WHITE NOISE

increment - the amount in hertz by which the frequency rises or falls every dwellTime seconds in sweep mode.
dwellTime - the time in seconds between frequency changes in sweep mode.
sweepType - determines whether the startFrequency is swept up to the stopFrequency, or down to it, or repeatedly up and down.
operation - configures the white noise/PRBS (pseudo-random binary sequence) generator.
shots - the number of cycles of the waveform to be produced after a trigger event. If this is set to a non-zero value 
		then sweeps must be set to zero.
sweeps - the number of times to sweep the frequency after a trigger event, according to sweepType. If this is set to a non-zero 	value then shots must be set to zero.
triggerType - the type of trigger that will be applied to the signal generator.
triggerSource - the source that will trigger the signal generator.
extInThresholdMV - not used by the PicoScope 4824

Output parameters:

status - status code returned by the driver.

For further information on the ps3000aSetSigGenBuiltIn function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.

</Description>
            </Method>
            <Method>
               <Name>setSigGenBuiltInSimple</Name>
               <Location>signalgenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = setSigGenBuiltInSimple(obj, waveType)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
 
    deviceObj = get(obj, 'Parent');
    sigGenType = get(obj, 'sigGenType');
    
    % Error checking
    if(sigGenType == PicoConstants.SIG_GEN_AWG || ...
            sigGenType == PicoConstants.SIG_GEN_FUNCT_GEN)
        
        % Convert millivolt values to microvolts  
        offsetVoltageUV = deviceObj.DriverData.offsetVoltage * 1e3;
        peakToPeakVoltageUV = deviceObj.DriverData.peakToPeakVoltage * 1e3;
        
        if(abs(offsetVoltageUV + peakToPeakVoltageUV) &gt; 4000000)
            
            error('setSigGenBuiltInSimple: The sum of offsetVoltage and peakToPeakVoltage cannot exceed +/-4000mV.');
            
        end
        
        status = calllib('ps3000a', 'ps3000aSetSigGenBuiltIn', deviceObj.DriverData.unitHandle, ...
                    offsetVoltageUV, peakToPeakVoltageUV, waveType, ...
                    deviceObj.DriverData.startFrequency, deviceObj.DriverData.startFrequency, ...
                        0, 0, 0, 0, 0, 0, 0, 0, 0);
                    
        % Output error message to user if status is not PICO_OK        
        if(status ~= PicoStatus.PICO_OK)

            switch(status)

                case PicoStatus.PICO_SIG_GEN_PARAM

                    error('setSigGenBuiltInSimple: One or more signal generator parameters are out of range.');

                case PicoStatus.PICO_SHOTS_SWEEPS_WARNING

                    error('setSigGenBuiltInSimple: Shots/sweeps warning.');

                case PicoStatus.PICO_SIGGEN_OUTPUT_OVER_VOLTAGE

                    error('setSigGenBuiltInSimple: The combined peak to peak voltage and the analog offset voltage must be in the range 0 -&gt; +/- 2V');

                case PicoStatus.PICO_WARNING_EXT_THRESHOLD_CONFLICT

                    error('setSigGenBuiltInSimple: External threshold conflict.');

                case PicoStatus.PICO_SIGGEN_OFFSET_VOLTAGE

                    error('setSigGenBuiltInSimple: The analog offset voltage is out of range.');

                case PicoStatus.PICO_SIGGEN_PK_TO_PK

                    error('setSigGenBuiltInSimple: The analog peak to peak voltage must be in the range 0 -&gt; +/- 2V.');

                case PicoStatus.PICO_SIGGEN_WAVEFORM_SETUP_FAILED

                    error('setSigGenBuiltInSimple: Unable to setup signal generator waveform.');

                otherwise     

                    error('setSigGenBuiltInSimple: Status code: %d. Please refer to the PicoStatus.m file.', status);
            end

        end  
        
        clear offsetVoltageUV;
        clear peakToPeakVoltageUV;
        clear sigGenType;
    
    else
        
        error('setSigGenBuiltInSimple: Signal Generator functionality not supported by this device.');
        
    end
</MCode>
               </Code>
               <Description>setSigGenBuiltInSimple(obj, offsetVoltageMV, pkToPkMV, waveType) sets up the signal generator to produce a signal of constant frequency from a list of built-in waveforms.

The startFrequency, offsetVoltage and peakToPeakVoltage properties must be set prior to using this function, or the default values will be used.

The offset voltage offsetVoltage and peakToPeakVoltage properties are defined in millivolts and converted to microvolts for the underlying driver. The sum of offsetVoltageMV and pkToPkMV cannot exceed 4000 millivolts.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Signalgenerator group.
wavetype - the type of waveform to be generated by the oscilloscope. Use the following waveType enumerations:

		0 - SINE
		1 - SQUARE
		2 - TRIANGLE
		3 - RAMP UP
		4 - RAMP DOWN
		5 - SINC
		6 - GAUSSIAN
		7 - HALF SINE
		8 - DC VOLTAGE
		9 - WHITE NOISE

Output parameters:

status - status code returned by the driver.

For further information, please view the Help text for the ps3000aSetSigGenBuiltIn function.
</Description>
            </Method>
            <Method>
               <Name>setSigGenOff</Name>
               <Location>signalgenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = setSigGenOff(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    offsetVoltage = 0;
    pkToPk = 0;
    waveTypeDC = evalin('base', 'ps3000aEnuminfo.enPS3000AWaveType.PS3000A_DC_VOLTAGE');
    
    status = calllib('ps3000a', 'ps3000aSetSigGenBuiltIn', ...
                deviceObj.DriverData.unitHandle, ...
                offsetVoltage, pkToPk, waveTypeDC, 0, 0, ...
                0, 0, 0, 0, 0, 0, 0, 0, 0);
                    
    if(status ~= PicoStatus.PICO_OK)
       
        error('setSigGenOff: Status code: %d. Please refer to the PicoStatus.m file.', status);
        
    end
            
	clear offsetVoltage;
    clear pkToPk;
    clear waveTypeDC;</MCode>
               </Code>
               <Description>setSigGenOff(obj) effectively turns off the signal generator by setting the output to a zero DC voltage.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Signalgenerator group.

Output parameters:

status - status code returned by the driver.</Description>
            </Method>
            <Method>
               <Name>setSigGenPropertiesArbitrary</Name>
               <Location>signalgenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, dwellTime] = setSigGenPropertiesArbitrary(obj, increment, dwellTime, sweepType, shots, sweeps, triggerType, triggerSource, extInThresholdMV)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    % Only call function if device has an Arbitrary Waveform Generator
    if(get(obj, 'sigGenType') == PicoConstants.SIG_GEN_AWG)
        
        maxBufferSize = get(obj, 'awgBufferSize');
        dacFrequency = get(obj, 'dacFrequency');
        
        % Convert the waveform to the range for the driver
        arbitraryWave = int16(arbitraryWaveform * double(intmax('int16')));
        
        startFrequency = get(obj, 'startFrequency');

        startDeltaPhase = freq2delta(startFrequency, length(arbitraryWave), ...
            maxBufferSize, dacFrequency);

        stopDeltaPhase = 0;

        dwellCount = 0;

        % No need to calculate stop delta phase if start and stop frequencies
        % are the same.
        
        stopFrequency = get(obj, 'stopFrequency');
        
        if(stopFrequency == startFrequency)

            stopDeltaPhase = startDeltaPhase;

        else

            stopDeltaPhase = freq2delta(stopFrequency, length(arbitraryWave), ...
                maxBufferSize, dacFrequency);

        end
        
        deltaPhaseIncrement = freq2delta(increment, length(arbitraryWave), ...
                maxBufferSize, dacFrequency);
            
        dwellCount = round(dwellTime * dacFrequency); % Round to the nearest integer
        
        if(dwellCount &lt; ps3000aConstants.ps3000a_MIN_DWELL_COUNT)

            dwellCount = ps3000aConstants.ps3000a_MIN_DWELL_COUNT;

        end
        
        % Return dwell time information to the user if it has been
        % modified.
        dwellTime = dwellCount / dacFrequency;

        % No external trigger for PicoScope 4824
        extInThreshold = 0;

        status = calllib('ps3000a', 'ps3000aSetSigGenPropertiesArbitrary', ...
                    deviceObj.DriverData.unitHandle, startDeltaPhase, ...
                    stopDeltaPhase, deltaPhaseIncrement, dwellCount, ...
                    sweepType, shots, sweeps, triggerType, triggerSource, ...
                    extInThreshold);
         
        % Output error message to user if status is not PICO_OK        
        if(status ~= PicoStatus.PICO_OK)
                    
            switch(status)

                case PicoStatus.PICO_SIG_GEN_PARAM
                    
                    error('setSigGenArbitrary: Incorrect parameter passed to the signal generator.');
                    
                case PicoStatus.PICO_SHOTS_SWEEPS_WARNING
                    
                    error('setSigGenArbitrary: Incorrect parameter passed to the signal generator.');
                    
                otherwise     
                    
                    error('setSigGenArbitrary: Status code: 0x%s. Please refer to the PS4000 Series (A API) Programmer''s Guide.\n', dec2hex(status));
            end
            
        end

        clear maxBufferSize
        clear dacFrequency
        clear startDeltaPhase
        clear stopDeltaPhase
        clear dwellCount
        clear deltaPhaseIncrement
        clear startFrequency;
        clear stopFrequency;
                
    else
       
        error('AWG functionality not supported by this device.');
        
    end</MCode>
               </Code>
               <Description>setSigGenArbitrary(obj, increment, dwellTime, sweepType, shots, sweeps, triggerType, triggerSource, extInThreshold) reprograms the arbitrary waveform generator. 

All values can be reprogrammed while the signal generator is waiting for a trigger.

The startFrequency, stopFrequency, offsetVoltage and peakToPeakVoltage properties must be set prior to calling this function, otherwise the default values will be used.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Signalgenerator group.
increment - the increase or decrease in frequency when operating in sweep mode.
dwellTime - the time for which the sweep stays at each frequency, in seconds.
sweepType -  determines whether the startFrequency is swept up to the stopFrequency, or down to it, or repeatedly up and down.
shots - the number of cycles of the waveform to be produced after a trigger event. If this is set to a non-zero value 
		then sweeps must be set to zero.
sweeps - the number of times to sweep the frequency after a trigger event, according to sweepType. If this is set to a non-zero value 
		then shots must be set to zero.
triggerType - the type of trigger that will be applied to the signal generator.
triggerSource - the source that will trigger the signal generator.
extInThresholdMV - not used by the PicoScope 4824

Output parameters:

status - status code returned by the driver.
dwellTime -  the dwell time will be modified if the user specifies a dwell time (125e-9) corresponding to less than the minimum dwell count for the device (10).

For further information on the ps3000aSetSigGenPropertiesArbitrary function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs.
</Description>
            </Method>
            <Method>
               <Name>setSigGenPropertiesBuiltIn</Name>
               <Location>signalgenerator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = setSigGenPropertiesBuiltIn(obj, increment, dwellTime, sweepType, shots, sweeps, triggerType, triggerSource, extInThresholdMV)
% If this is a group function, OBJ is the group object. If
% it a base device function, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    sigGenType = get(obj, 'sigGenType');
    
    % Error checking
    if(sigGenType == PicoConstants.SIG_GEN_AWG || ...
            sigGenType == PicoConstants.SIG_GEN_FUNCT_GEN)
        
        % External trigger not used
        extInThreshold = 0

        status = calllib('ps3000a', 'ps3000aSetSigGenPropertiesBuiltIn', ...
                    deviceObj.DriverData.unitHandle, ...
                    deviceObj.DriverData.startFrequency, 
                    deviceObj.DriverData.stopFrequency, ...
                    increment, dwellTime, sweepType, shots, sweeps, ...
                    triggerType, triggerSource, extInThreshold);

        % Output error message to user if status is not PICO_OK        
        if(status ~= PicoStatus.PICO_OK)

            switch(status)

                case PicoStatus.PICO_SIG_GEN_PARAM

                    error('setSigGenPropertiesBuiltIn: One or more signal generator parameters are out of range.');

                case PicoStatus.PICO_SHOTS_SWEEPS_WARNING

                    error('setSigGenPropertiesBuiltIn: Shots/sweeps warning.');

                otherwise     

                    error('setSigGenPropertiesBuiltIn: Status code: 0x%s. Please refer to the PS4000 (A API) Programmer''s Guide.\n', dec2hex(status));
            end

        end
        
        clear sigGenType;
            
    else
        
        error('setSigGenPropertiesBuiltIn: Signal Generator functionality not supported by this device.');
        
    end
    </MCode>
               </Code>
               <Description>setSigGenPropertiesBuiltIn(obj, increment, dwellTime, sweepType, shots, sweeps, triggerType, triggerSource, extInThresholdMV) reprograms the signal generator. 

Values can be changed while the signal generator is waiting for a trigger.

The startFrequency, stopFrequency, offsetVoltage and peakToPeakVoltage properties must be set prior to calling this function or the default values will be used.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Signalgenerator group.
increment - the amount in hertz by which the frequency rises or falls every dwellTime seconds in sweep mode.
dwellTime - the time in seconds between frequency changes in sweep mode.
sweepType - determines whether the startFrequency is swept up to the stopFrequency, or down to it, or repeatedly up and down.
shots - the number of cycles of the waveform to be produced after a trigger event. If this is set to a non-zero value 
		then sweeps must be set to zero.
sweeps - the number of times to sweep the frequency after a trigger event, according to sweepType. If this is set to a non-zero value 
		then shots must be set to zero.
triggerType - the type of trigger that will be applied to the signal generator.
triggerSource - the source that will trigger the signal generator.
extInThresholdMV - not used by the PicoScope 4824

Output parameters:

status - status code returned by the driver.

For further information on the ps3000aSetSigGenPropertiesBuiltIn function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>streaming</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="streaming" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>autoStop</Name>
               <Location>streaming</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    % If autoStop doesn't exist, create it.
    if ( ~isfield(deviceObj.DriverData, 'autoStop') )
        deviceObj.DriverData.autoStop = 0;
    else
        propertyValue = deviceObj.DriverData.autoStop;
    end</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    deviceObj.DriverData.autoStop = propertyValue;</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue>1</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>A flag to specify if streaming data collection should stop when all of maxSamples have been taken.

This flag should be set to 0 or 1.</Description>
            </Property>
            <Property>
               <Name>streamingInterval</Name>
               <Location>streaming</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    % If streamingInterval doesn't exist, create it.
    if ( ~isfield(deviceObj.DriverData, 'streamingInterval') )
        deviceObj.DriverData.streamingInterval = 0;
    end
    
    propertyValue = deviceObj.DriverData.streamingInterval;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    deviceObj.DriverData.streamingInterval = propertyValue;</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>autoStopped</Name>
               <Location>streaming</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function autoStop = autoStopped(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    autoStop = calllib('ps3000aWrap', 'AutoStopped', ...
        deviceObj.DriverData.wrapperDeviceIndex);</MCode>
               </Code>
               <Description>autoStopped(obj) indicates if the device has stopped on collection of the number of samples specified in the call to the ps3000aRunStreaming function.

The autoStop property must have been set to 1.

Input parameters:

obj - the object representing the Streaming group.

Output parameters:

autoStop - 0 if the device has not stopped, non-zero if streaming has auto-stopped.

Please also refer to the AutoStopped function in the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>availableData</Name>
               <Location>streaming</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [numSamples, startIndex] = availableData(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    startIndex = 0; % Initialise variable to be used as a pointer

    [numSamples, startIndex] = calllib('ps3000aWrap', 'AvailableData', ...
                                deviceObj.DriverData.wrapperDeviceIndex, startIndex);</MCode>
               </Code>
               <Description>availableData(obj) indicates the number of samples returned from the driver and shows the start index of the data in the buffer when collecting data in streaming mode.

Input parameters:

obj - the object representing the Streaming group.

Output parameters:

numSamples - 0, data is not yet available; Non-zero, the number of samples returned from the driver.
startIndex - an index to the first valid sample in the buffer (when data is available).

Note: the startIndex value is zero-based so should be incremented by 1 when used to retrieve data from the buffer.

Please also refer to the AvailableData function in the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>clearTriggerReady</Name>
               <Location>streaming</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function triggerCleared = clearTriggerReady(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    triggerCleared = calllib('ps3000aWrap', 'ClearTriggerReady', ...
        deviceObj.DriverData.wrapperDeviceIndex);</MCode>
               </Code>
               <Description>clearTriggerReady(obj) clears the triggered and triggeredAt flags in relation to streaming mode capture.

Input parameters:

obj - the object representing the Streaming group.

Output parameters:

1 - Call successfully completed.

Please also refer to the ClearTriggerReady function in the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>getStreamingLatestValues</Name>
               <Location>streaming</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = getStreamingLatestValues(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    status = calllib('ps3000aWrap', 'GetStreamingLatestValues', ...
                deviceObj.DriverData.wrapperDeviceIndex);
            
    if(status ~= PicoStatus.PICO_OK &amp;&amp; status ~= PicoStatus.PICO_BUSY)
           
        error('ps3000aGetStreamingLatestValues: Status code: %d. Please refer to the PicoStatus.m file.', status); 
        
    end</MCode>
               </Code>
               <Description>getStreamingLatestValues(obj) facilitates communication with the underlying driver to return the next block of values to your application when capturing data in streaming mode.

Input parameters:

obj - the object representing the Streaming group.

Output parameters:

status - status code returned by the driver.

For further information on the GetStreamingLatestValues and underlying ps3000aGetStreamingLatestValues functions please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>isReady</Name>
               <Location>streaming</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ready = isReady(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    ready = calllib('ps3000aWrap', 'IsReady', deviceObj.DriverData.wrapperDeviceIndex);
</MCode>
               </Code>
               <Description>isReady(obj) is used to poll the driver to verify that data is ready to be received. The ps3000aRunStreaming function must have been called prior to calling this function.

Input parameters:

obj - the object representing the Streaming group.

Output parameters:

ready - 0, if data is not yet available; non-zero if data is ready to be collected.

For further information on the IsReady function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>isTriggerReady</Name>
               <Location>streaming</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [triggered, triggeredAt] = isTriggerReady(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    triggeredAt = 0; % Initialise value to zero for pointer.

    [triggered, triggeredAt] = calllib('ps3000aWrap', 'IsTriggerReady', ...
        deviceObj.DriverData.wrapperDeviceIndex, triggeredAt);
</MCode>
               </Code>
               <Description>isTriggerReady(obj) indicates whether a trigger has occurred when collecting data in streaming mode, and the location of the trigger point.

Input parameters:

obj - the object representing the Streaming group.

Output parameters:

triggered - 0, if the device has not triggered; Non-zero, if the device has been triggered.
triggeredAt - the zero-based index of the sample in the buffer relative to the start index (see availableData) where the trigger occurred

For further information on the IsTriggerReady function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aNoOfStreamingValues</Name>
               <Location>streaming</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, noOfValues] = ps3000aNoOfStreamingValues(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    unitHandle = deviceObj.DriverData.unitHandle;
    
    noOfValues = 0; % Initialise value for use as pointer.

    [status, noOfValues] = calllib('ps3000a', 'ps3000aNoOfStreamingValues', ...
        unitHandle, noOfValues);
    
    if(status ~= PicoStatus.PICO_OK)
           
        error('ps3000aNoOfStreamingValues: Status code: %d. Please refer to the PicoStatus.m file.', status); 
        
    end
</MCode>
               </Code>
               <Description>ps3000aNoOfStreamingValues(obj) returns the number of samples available after data collection in streaming mode. Call this function after calling ps3000aStop.

Input parameters:

obj - the object representing the device.

Output parameters:

status - status code returned by the driver.
noOfValues - the number of samples.

For further information on the ps3000aNoOfStreamingValues function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>ps3000aRunStreaming</Name>
               <Location>streaming</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, sampleInterval, sampleIntervalTimeUnitsStr] = ps3000aRunStreaming(obj, downSampleRatio, downSampleRatioMode, overviewBufferSize)


    deviceObj = get(obj, 'Parent');
    unitHandle = deviceObj.DriverData.unitHandle;
    
    % Calculate sampleInterval and sampleIntervalTimeUnits according to
    % streamingInterval property set. Property is defined in seconds.

    streamingInterval = deviceObj.DriverData.streamingInterval;
    
    femtosecondsEnum = evalin('base', 'ps3000aEnuminfo.enPS3000ATimeUnits.PS3000A_FS');
    picosecondsEnum = evalin('base', 'ps3000aEnuminfo.enPS3000ATimeUnits.PS3000A_PS');
    nanosecondsEnum = evalin('base', 'ps3000aEnuminfo.enPS3000ATimeUnits.PS3000A_NS');
    microsecondsEnum = evalin('base', 'ps3000aEnuminfo.enPS3000ATimeUnits.PS3000A_US');
    millisecondsEnum = evalin('base', 'ps3000aEnuminfo.enPS3000ATimeUnits.PS3000A_MS');
    secondsEnum = evalin('base', 'ps3000aEnuminfo.enPS3000ATimeUnits.PS3000A_S');
    
    sampleIntervalTimeUnits = secondsEnum;
    
    % Match the specified interval to the correct time units
    % If an interval with component less than the minimum value for the time unit 
    % is specified e.g 1.3e-3, that will be converted to 1300 microseconds.
    
    if(streamingInterval &lt; 1e-12) % Femtoseconds (unlikely with USB 2.0/USB 3.0)
        
        sampleInterval = streamingInterval * 1e15;
        sampleIntervalTimeUnits = femtosecondsEnum;
        
    elseif(streamingInterval &gt;= 1e-12 &amp;&amp; streamingInterval &lt; 1e-9) % Picoseconds
        
        if(mod(streamingInterval, 1e-12) &gt; 0)
        
            sampleInterval = streamingInterval * 1e15;
            sampleIntervalTimeUnits = femtosecondsEnum;
            
        else
           
            sampleInterval = streamingInterval * 1e12;
            sampleIntervalTimeUnits = picosecondsEnum;
            
        end
        
	elseif(streamingInterval &gt;= 1e-9 &amp;&amp; streamingInterval &lt; 1e-6) % Nanoseconds

        if(mod(streamingInterval, 1e-9) &gt; 0)
            
            sampleInterval = streamingInterval * 1e12;
            sampleIntervalTimeUnits = picosecondsEnum;
            
        else
           
            sampleInterval = streamingInterval * 1e9;
            sampleIntervalTimeUnits = nanosecondsEnum;
            
        end
        
	elseif(streamingInterval &gt;= 1e-6 &amp;&amp; streamingInterval &lt; 1e-3) % Microseconds
        
        if(mod(streamingInterval, 1e-6) &gt; 0)
        
            sampleInterval = streamingInterval * 1e9;
            sampleIntervalTimeUnits = nanosecondsEnum;
            
        else
           
            sampleInterval = streamingInterval * 1e6;
            sampleIntervalTimeUnits = microsecondsEnum;
            
        end
        
    elseif(streamingInterval &gt;= 1e-3 &amp;&amp; streamingInterval &lt; 1) % Milliseconds
        
        if(mod(streamingInterval, 1e-3) &gt; 0)
           
            sampleInterval = streamingInterval * 1e6;
            sampleIntervalTimeUnits = microsecondsEnum;
            
        else
            
            sampleInterval = streamingInterval * 1e3;
            sampleIntervalTimeUnits = millisecondsEnum;
            
        end
            
    else 
        
        % Already defined seconds 
        
        % 
        if(mod(sampleInterval, 1) &gt; 0)
           
           sampleInterval = streamingInterval * 1e3;
           sampleIntervalTimeUnits = millisecondsEnum;
           
       end
        
    end
        
    autoStop = get(obj, 'autoStop');
    
    [status, sampleInterval] = calllib('ps3000a', 'ps3000aRunStreaming', ...
        unitHandle, sampleInterval, sampleIntervalTimeUnits, ...
        deviceObj.DriverData.numPreTriggerSamples, ...
        deviceObj.DriverData.numPostTriggerSamples, ...
        autoStop, downSampleRatio, downSampleRatioMode, overviewBufferSize);
    
    if(status == PicoStatus.PICO_OK)
        
        if (deviceObj.DriverData.displayOutput == PicoConstants.TRUE)
            
            fprintf('ps3000aRunStreaming:- Sample interval %d', sampleInterval);
            
        end
        
        switch(sampleIntervalTimeUnits)
       
            case femtosecondsEnum

                sampleIntervalTimeUnitsStr = 'fs';
                
            case picosecondsEnum

                sampleIntervalTimeUnitsStr = 'ps';

            case nanosecondsEnum

                sampleIntervalTimeUnitsStr = 'ns';

            case microsecondsEnum

                sampleIntervalTimeUnitsStr = 'us';

            case millisecondsEnum

                sampleIntervalTimeUnitsStr = 'ms';

            case secondsEnum

                sampleIntervalTimeUnitsStr = 's';
            
            otherwise
                
                % Do nothing
        
        end
        
        if (deviceObj.DriverData.displayOutput == PicoConstants.TRUE)
            
            fprintf('%s\n', sampleIntervalTimeUnitsStr);
            
        end
        
        clear streamingInterval;
        clear femtosecondsEnum;
        clear picosecondsEnum;
        clear nanosecondsEnum;
        clear microsecondsEnum;
        clear millisecondsEnum;
        clear secondsEnum;
        
    % Check for Power connection
    elseif(status == PicoStatus.PICO_POWER_SUPPLY_NOT_CONNECTED || ...
            status == PICO_USB3_0_DEVICE_NON_USB3_0_PORT)
    
        status = invoke(obj, 'ps3000aChangePowerSource', status)
        
    else
        
        error('ps3000aRunStreaming: Status code %d\n', status);
        
    end
</MCode>
               </Code>
               <Description>ps3000aRunStreaming(obj, downSampleRatio, downSampleRatioMode, overviewBufferSize) function tells the oscilloscope to start collecting data in streaming mode. Use the function getStreamingLatestValues to ensure values are copied into the application buffers. 

Input parameters:

obj - the object representing the Streaming group.
downSampleRatio - the downsampling factor that will be applied to the raw data.
downSampleRatioMode -  which downsampling mode to use (an enumeration from the PS3000A_RATIO_MODE range).
overviewBufferSize - the size of the overview buffers (temporary buffers used for storing the data before returning it to the application).

Output parameters:

status - status code returned by the driver.
sampleInterval - the actual time interval used.
sampleIntervalTimeUnitsStr - a string representing the time unit for the sampling interval.

For further information on the ps3000aRunStreaming function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>setAppAndDriverBuffers</Name>
               <Location>streaming</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = setAppAndDriverBuffers(obj, channel, appBuffer, driverBuffer, bufferLength)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    status = calllib('ps3000aWrap', 'setAppAndDriverBuffers', ...
        deviceObj.DriverData.wrapperDeviceIndex, channel, appBuffer, driverBuffer, bufferLength);
    
    if(status ~= PicoStatus.PICO_OK)
       
        if(status == PicoStatus.PICO_INVALID_CHANNEL)
            
            error('setAppAndDriverBuffers: Invalid channel specified.');
                    
        elseif(status == PicoStatus.PICO_INVALID_HANDLE)
            
            error('setAppAndDriverBuffers: Invalid handle specified.');
            
        else
            
            error('setAppAndDriverBuffers: Status code %d - please refer to the PicoStatus.m file.\n', status);
        
        end
        
    end</MCode>
               </Code>
               <Description>setAppAndDriverBuffers(obj, channel, appBuffer, driverBuffer, bufferLength) set the application and corresponding driver buffer in the wrapper dll.

This function is required to allow the driver to copy the data into the application buffer being used in MATLAB when acquiring data from the PicoScope in streaming mode without aggregation.

Input parameters:

obj - the object representing the Streaming group.
channel - the channel to which the buffer corresponds (an enumeration from the PS3000A_CHANNEL range).
appBuffer - a libpointer to a 1-D array of 16-bit integer values representing the application buffer.
driverBuffer - the libpointer passed to the driver in the ps3000aSetDataBuffer function call.
bufferLength - the length of the arrays (must be equal)

Output parameters:

status - status code returned by the wrapper driver.

For further information on the setAppAndDriverBuffers function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>setAppAndDriverDigiBuffers</Name>
               <Location>streaming</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = setAppAndDriverDigiBuffers(obj, port, appBuffer, driverBuffer, bufferLength)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    status = calllib('ps3000aWrap', 'setAppAndDriverDigiBuffers', ...
        deviceObj.DriverData.wrapperDeviceIndex, port, appBuffer, driverBuffer, bufferLength);
    
    if(status ~= PicoStatus.PICO_OK)
       
        if(status == PicoStatus.PICO_INVALID_CHANNEL)
            
            error('setAppAndDriverDigiBuffers: Invalid channel specified.');
                    
        elseif(status == PicoStatus.PICO_INVALID_HANDLE)
            
            error('setAppAndDriverBuffers: Invalid handle specified.');
            
        else
            
            error('setAppAndDriverDigiBuffers: Status code %d - please refer to the PicoStatus.m file.\n', status);
        
        end
        
    end</MCode>
               </Code>
               <Description>setAppAndDriverDigiBuffers(obj, port, appBuffer, driverBuffer, bufferLength) set the application and corresponding driver buffer in the wrapper dll.

This function is required to allow the driver to copy the data into the application buffer being used in MATLAB when acquiring data from the PicoScope in streaming mode without aggregation.

Input parameters:

obj - the object representing the Streaming group.
port - the port to which the buffer corresponds (an enumeration from the PS3000A_DIGITAL_PORT range).
appBuffer - a libpointer to a 1-D array of 16-bit integer values representing the application buffer.
driverBuffer - the libpointer passed to the driver in the ps3000aSetDataBuffer function call.
bufferLength - the length of the arrays (must be equal)

Output parameters:

status - status code returned by the wrapper driver.

For further information on the setAppAndDriverBuffers function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>setMaxMinAppAndDriverBuffers</Name>
               <Location>streaming</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = setMaxMinAppAndDriverBuffers(obj, channel, appMaxBuffer, appMinBuffer, driverMaxBuffer, driverMinBuffer, bufferLength)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
    
    deviceObj = get(obj, 'Parent');
    
    status = calllib('ps3000aWrap', 'setMaxMinAppAndDriverBuffers', ...
        deviceObj.DriverData.wrapperDeviceIndex, channel, appMaxBuffer, appMinBuffer, ...
        driverMaxBuffer, driverMinBuffer, bufferLength);
    
    if(status ~= PicoStatus.PICO_OK)
       
        if(status == PicoStatus.PICO_INVALID_CHANNEL)
            
            error('setAppAndDriverBuffers: Invalid channel specified.');
                    
        elseif(status == PicoStatus.PICO_INVALID_HANDLE)
            
            error('setMaxMinAppAndDriverBuffers: Invalid handle specified.');
            
        else
            
            error('setMaxMinAppAndDriverBuffers: Status code %d - please refer to the PicoStatus.m file.\n', status);
        
        end
        
    end</MCode>
               </Code>
               <Description>setMaxMinAppAndDriverBuffers(obj, channel, appMaxBuffer, appMinBuffer, driverMaxBuffer, driverMinBuffer, bufferLength) set the maximum and minimum application and corresponding driver buffers in the wrapper dll.

This function is required to allow the driver to copy the data into the maximum and minimum application buffers being used in MATLAB when acquiring data from the PicoScope in streaming mode with aggregation.

Input parameters:

obj - the object representing the Streaming group.
channel - the channel to which the buffer corresponds (an enumeration from the ps3000a_CHANNEL range).
appMaxBuffer - a libpointer to a 1-D array of 16-bit integer values representing the application buffer.
appMinBuffer - a libpointer to a 1-D array of 16-bit integer values representing the application buffer.
driverMaxBuffer - the libpointer passed to the driver for the maximum aggregated data values  in the ps3000aSetDataBuffers function call.
driverMinBuffer - the libpointer passed to the driver for the minimum aggregated data values in the ps3000aSetDataBuffers function call.
bufferLength - the length of the arrays (must be equal)

Output parameters:

status - status code returned by the wrapper driver.

For further information on the setMaxMinAppAndDriverBuffers function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>setMaxMinAppAndDriverDigiBuffers</Name>
               <Location>streaming</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = setMaxMinAppAndDriverDigiBuffers(obj, channel, appMaxBuffer, appMinBuffer, driverMaxBuffer, driverMinBuffer, bufferLength)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
    
    deviceObj = get(obj, 'Parent');
    
    status = calllib('ps3000aWrap', 'setMaxMinAppAndDriverDigiBuffers', ...
        deviceObj.DriverData.wrapperDeviceIndex, channel, appMaxBuffer, appMinBuffer, ...
        driverMaxBuffer, driverMinBuffer, bufferLength);
    
    if(status ~= PicoStatus.PICO_OK)
       
        if(status == PicoStatus.PICO_INVALID_CHANNEL)
            
            error('setAppAndDriverBuffers: Invalid channel specified.');
                    
        elseif(status == PicoStatus.PICO_INVALID_HANDLE)
            
            error('setMaxMinAppAndDriverDigiBuffers: Invalid handle specified.');
            
        else
            
            error('setMaxMinAppAndDriverDigiBuffers: Status code %d - please refer to the PicoStatus.m file.\n', status);
        
        end
        
    end</MCode>
               </Code>
               <Description>setMaxMinAppAndDriverDigiBuffers(obj, portl, appMaxBuffer, appMinBuffer, driverMaxBuffer, driverMinBuffer, bufferLength) set the maximum and minimum application and corresponding driver buffers in the wrapper dll.

This function is required to allow the driver to copy the data into the maximum and minimum application buffers being used in MATLAB when acquiring data from the PicoScope in streaming mode with aggregation.

Input parameters:

obj - the object representing the Streaming group.
port - the port to which the buffer corresponds (an enumeration from the PS3000A_DIGITAL_PORT range).
appMaxBuffer - a libpointer to a 1-D array of 16-bit integer values representing the application buffer.
appMinBuffer - a libpointer to a 1-D array of 16-bit integer values representing the application buffer.
driverMaxBuffer - the libpointer passed to the driver for the maximum aggregated data values  in the ps3000aSetDataBuffers function call.
driverMinBuffer - the libpointer passed to the driver for the minimum aggregated data values in the ps3000aSetDataBuffers function call.
bufferLength - the length of the arrays (must be equal)

Output parameters:

status - status code returned by the wrapper driver.

For further information on the setMaxMinAppAndDriverBuffers function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>trigger</Name>
         <Description>The Trigger group contains a set of properties and functions related to the trigger functionality of the device.</Description>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="trigger" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>autoTriggerMs</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
     % If autoTriggerMs doesn't exist, create it.
    if ( ~isfield(deviceObj.DriverData, 'autoTriggerMs') )
        deviceObj.DriverData.autoTriggerMs = 0;
    end
    
    propertyValue = deviceObj.DriverData.autoTriggerMs;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    deviceObj.DriverData.autoTriggerMs = propertyValue;</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The number of milliseconds the device will wait if no trigger occurs.
</Description>
            </Property>
            <Property>
               <Name>delay</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
     % If delay doesn't exist, create it.
    if ( ~isfield(deviceObj.DriverData, 'delay') )
        deviceObj.DriverData.delay = 0;
    end
    
    propertyValue = deviceObj.DriverData.delay;</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    deviceObj.DriverData.delay = propertyValue;</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue>0</DefaultValue>
               <ReadOnly>never</ReadOnly>
               <Description>The time, in sample periods, between the trigger occurring and the first sample being taken.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ps3000aIsTriggerOrPulseWidthQualifierEnabled</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [status, triggerEnabled, pwqEnabled] = ps3000aIsTriggerOrPulseWidthQualifierEnabled(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');

    % Allocate values for variables
    triggerEnabled = 0;
    pwqEnabled = 0;

    [status, triggerEnabled, pwqEnabled] = calllib('ps3000a', ...
        'ps3000aIsTriggerOrPulseWidthQualifierEnabled', ...
        deviceObj.DriverData.unitHandle, triggerEnabled, pwqEnabled);

    if(status ~= PicoStatus.PICO_OK)

        error('ps3000aIsTriggerOrPulseWidthQualifierEnabled: Status code: %d. Please refer to the PicoStatus.m file.', status); 

    end</MCode>
               </Code>
               <Description>ps3000aIsTriggerOrPulseWidthQualifierEnabled(obj) discovers whether a trigger, or pulse width triggering, is enabled.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Trigger group.

Output parameters:

status - status code returned by the device.
triggerEnabled - indicates if trigger is set.
pwqEnabled - indicates if pulse widtrh qualifier is set.

For further information on the ps3000aIsTriggerOrPulseWidthQualifierEnabled function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>setAdvancedTrigger</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [advTrigStatus] = setAdvancedTrigger(obj, triggerChannelProperties, triggerConditions, triggerDirections)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    unitHandle = deviceObj.DriverData.unitHandle;
    
    advTrigStatus = zeros(3, 1);
    
     % Set the trigger channel properties
    disp('Setting Trigger Channel Properties...');
    
    auxOutputEnabled = 0; % Not used
    
    advTrigStatus(1) = calllib('ps3000a', ...
        'ps3000aSetTriggerChannelProperties', unitHandle, ...
        triggerChannelProperties, length(triggerChannelProperties), auxOutputEnabled, deviceObj.DriverData.autoTriggerMs);
    
    if(advTrigStatus(1) ~= PicoStatus.PICO_OK)
       
        error('setAdvancedTrigger:ps3000aSetTriggerChannelProperties status code %d - please refer to the PicoStatus.m file.', advTrigStatus(1));
        
    end

    % Set trigger conditions
    disp('Setting Trigger Channel Conditions...');
    
    advTrigStatus(2) = calllib('ps3000a', ...
        'ps3000aSetTriggerChannelConditionsV2', unitHandle, triggerConditions, length(triggerConditions));

    if(advTrigStatus(2) ~= PicoStatus.PICO_OK)
       
        error('setAdvancedTrigger:ps3000aSetTriggerChannelConditionsV2 status code %d - please refer to the PicoStatus.m file.', advTrigStatus(2));
        
    end
    
    % Set trigger conditions
    disp('Setting Trigger Channel Directions...');
    
    advTrigStatus(3) = calllib('ps3000a', 'ps3000aSetTriggerChannelDirections', ...
        unitHandle, triggerDirections(1), triggerDirections(2), ...
        triggerDirections(3), triggerDirections(4), triggerDirections(5), 0);

    if(advTrigStatus(3) ~= PicoStatus.PICO_OK)
       
        error('setAdvancedTrigger:ps3000aSetTriggerChannelDirections status code %d - please refer to the PicoStatus.m file.', advTrigStatus(3));
        
    end
    
    fprintf('Advanced Trigger setup complete.\n\n');
</MCode>
               </Code>
               <Description>setAdvancedTrigger(obj, triggerChannelProperties, triggerConditions, triggerDirections)</Description>
            </Method>
            <Method>
               <Name>setSimpleTrigger</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = setSimpleTrigger(obj, source, thresholdMV, direction)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    % Find the voltage range index
    % Set default as 5V (External trigger will use this range).
    channelRange = evalin('base', 'ps3000aEnuminfo.enPS3000ARange.PS3000A_5V');

    % Obtain information for device 
    channelSettings = deviceObj.DriverData.channelSettings;
    
    % Range is item 3 in the row for each channel

    switch(source)

        % Channel A
        case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_A')

            channelRange = channelSettings(1,3);

        % Channel B
        case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_B')

            channelRange = channelSettings(2,3);

        % Channel C
        case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_C')

            channelRange = channelSettings(3,3);

        % Channel D
        case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_CHANNEL_D')

            channelRange = channelSettings(4,3);
            
        % External trigger
        case evalin('base', 'ps3000aEnuminfo.enPS3000AChannel.PS3000A_EXTERNAL')
            
            % External trigger has +/-5V range - no need to change.

        otherwise

            error('setSimpleTrigger: Invalid channel specified');

    end
    
    % Obtain the range being used in millivolts
    channelRangeMV = PicoConstants.SCOPE_INPUT_RANGES(channelRange + 1);

    % Calculate the threshold in ADC counts
    thresholdADC = mv2adc(thresholdMV, channelRangeMV, deviceObj.DriverData.maxADCValue);

    status = calllib('ps3000a', 'ps3000aSetSimpleTrigger', ...
            deviceObj.DriverData.unitHandle, PicoConstants.TRUE, source, ...
            thresholdADC, direction, deviceObj.DriverData.delay, ...
            deviceObj.DriverData.autoTriggerMs);
        
    if(status ~= PicoStatus.PICO_OK)
       
        error('setSimpleTrigger: Status code: %d. Please refer to the PicoStatus.m file.', status);
        
    end
</MCode>
               </Code>
               <Description>setSimpleTrigger(obj, source, thresholdMV, direction) simplifies arming the trigger. 

It supports only the LEVEL trigger types and does not allow more than one channel to have a trigger applied to it.

This function may be used with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Trigger group.
source - the channel on which to trigger.
thresholdMV - the level at which the trigger will fire (in millivolts).
direction - the direction in which the signal must move to cause a trigger.

Output parameters:

status - status code returned by the driver.

For further information on the ps3000aSetSimpleTrigger function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
            <Method>
               <Name>setTriggerDelay</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = setTriggerDelay(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
    
    deviceObj = get(obj, 'Parent');
    
    status = calllib('ps3000a', 'ps3000aSetTriggerDelay', ...
        deviceObj.DriverData.unitHandle, deviceObj.DriverData.delay);
    
    if(status == PicoStatus.PICO_USER_CALLBACK)
        
        error('setTriggerDelay - function cannot be called as driver is in the callback function.');
        
    elseif(status == PicoStatus.PICO_DRIVER_FUNCTION)
        
        error('setTriggerDelay - another function is being processed.');
        
    else
        
        % Do nothing
        
    end
    </MCode>
               </Code>
               <Description>setTriggerDelay(obj)</Description>
            </Method>
            <Method>
               <Name>setTriggerOff</Name>
               <Location>trigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function status = setTriggerOff(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

    deviceObj = get(obj, 'Parent');
    
    % Set trigger to false for channel A
    
    source = 0; % Channel A
    thresholdADC = 0;
    direction = 0;
    
    status = calllib('ps3000a', 'ps3000aSetSimpleTrigger', ...
            deviceObj.DriverData.unitHandle, PicoConstants.FALSE, source, ...
            thresholdADC, direction, deviceObj.DriverData.delay, ...
            deviceObj.DriverData.autoTriggerMs);
    
    %status = calllib('ps3000a', 'ps3000aSetTriggerChannelConditions', ...
    %    get(obj, 'unitHandle'), [], 0);
    
    if(status ~= PicoStatus.PICO_OK)
           
        error('setTriggerOff: Status code %d\n', status);
        
    end</MCode>
               </Code>
               <Description>setTriggerOff(obj) switches off triggering on the oscilloscope.

This function may be with the Test and Measurement Tool.

Input parameters:

obj - the object representing the Trigger group.

Output parameters:

status - status code returned by the device.

For further information on the underlying ps3000aSetSimpleTrigger function please refer to the PicoScope 3000 Series (A API) PC Oscilloscopes and MSOs Programmer's Guide.</Description>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>